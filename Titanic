{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"}],"dockerImageVersionId":30918,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Descrição dos dados\n*Variable    Definition*\n\nsurvival\tSurvival\t0 = No, 1 = Yes\n\npclass\t    Ticket class\t1 = 1st, 2 = 2nd, 3 = 3rd\n\nsex\t        Sex\t\n\nAge\t        Age in years\t\n\nsibsp\t    # of siblings / spouses aboard the Titanic\t\n\nparch\t    # of parents / children aboard the Titanic\t\n\nticket\t    Ticket number\t\n\nfare\t    Passenger fare\t\n\ncabin\t    Cabin number\t\n\nembarked\tPort of Embarkation\tC = Cherbourg, Q = Queenstown, S = Southampton\n","metadata":{}},{"cell_type":"markdown","source":"# Regras de força de correlação entre variáveis:\n## Correlação de Pearson\n\n\n### High Degree: Values between ±0.50 and ±1 suggest a strong correlation.\n\n### Moderate Degree: Values between ±0.30 and ±0.49 indicate a moderate correlation.\n\n### Low Degree: Values below +0.29 are considered a weak correlation.\n\n### No Correlation: A value of zero implies no relationship.\n","metadata":{}},{"cell_type":"code","source":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nfrom collections import Counter\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:22:42.333976Z","iopub.execute_input":"2025-10-08T17:22:42.334220Z","iopub.status.idle":"2025-10-08T17:22:45.037416Z","shell.execute_reply.started":"2025-10-08T17:22:42.334201Z","shell.execute_reply":"2025-10-08T17:22:45.036210Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"import os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:22:48.094846Z","iopub.execute_input":"2025-10-08T17:22:48.095171Z","iopub.status.idle":"2025-10-08T17:22:48.102407Z","shell.execute_reply.started":"2025-10-08T17:22:48.095147Z","shell.execute_reply":"2025-10-08T17:22:48.101267Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/titanic/train.csv\n/kaggle/input/titanic/test.csv\n/kaggle/input/titanic/gender_submission.csv\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"test = pd.read_csv(\"/kaggle/input/titanic/test.csv\")\ntest.head(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:22:49.231475Z","iopub.execute_input":"2025-10-08T17:22:49.231859Z","iopub.status.idle":"2025-10-08T17:22:49.272393Z","shell.execute_reply.started":"2025-10-08T17:22:49.231832Z","shell.execute_reply":"2025-10-08T17:22:49.271493Z"}},"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Pclass                                          Name     Sex  \\\n0          892       3                              Kelly, Mr. James    male   \n1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n2          894       2                     Myles, Mr. Thomas Francis    male   \n3          895       3                              Wirz, Mr. Albert    male   \n4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n5          897       3                    Svensson, Mr. Johan Cervin    male   \n6          898       3                          Connolly, Miss. Kate  female   \n7          899       2                  Caldwell, Mr. Albert Francis    male   \n8          900       3     Abrahim, Mrs. Joseph (Sophie Halaut Easu)  female   \n9          901       3                       Davies, Mr. John Samuel    male   \n\n    Age  SibSp  Parch     Ticket     Fare Cabin Embarked  \n0  34.5      0      0     330911   7.8292   NaN        Q  \n1  47.0      1      0     363272   7.0000   NaN        S  \n2  62.0      0      0     240276   9.6875   NaN        Q  \n3  27.0      0      0     315154   8.6625   NaN        S  \n4  22.0      1      1    3101298  12.2875   NaN        S  \n5  14.0      0      0       7538   9.2250   NaN        S  \n6  30.0      0      0     330972   7.6292   NaN        Q  \n7  26.0      1      1     248738  29.0000   NaN        S  \n8  18.0      0      0       2657   7.2292   NaN        C  \n9  21.0      2      0  A/4 48871  24.1500   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>3</td>\n      <td>Kelly, Mr. James</td>\n      <td>male</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330911</td>\n      <td>7.8292</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>3</td>\n      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n      <td>female</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>363272</td>\n      <td>7.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>2</td>\n      <td>Myles, Mr. Thomas Francis</td>\n      <td>male</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>240276</td>\n      <td>9.6875</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>3</td>\n      <td>Wirz, Mr. Albert</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>315154</td>\n      <td>8.6625</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>3</td>\n      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n      <td>female</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3101298</td>\n      <td>12.2875</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>897</td>\n      <td>3</td>\n      <td>Svensson, Mr. Johan Cervin</td>\n      <td>male</td>\n      <td>14.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7538</td>\n      <td>9.2250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>898</td>\n      <td>3</td>\n      <td>Connolly, Miss. Kate</td>\n      <td>female</td>\n      <td>30.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330972</td>\n      <td>7.6292</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>899</td>\n      <td>2</td>\n      <td>Caldwell, Mr. Albert Francis</td>\n      <td>male</td>\n      <td>26.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>248738</td>\n      <td>29.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>900</td>\n      <td>3</td>\n      <td>Abrahim, Mrs. Joseph (Sophie Halaut Easu)</td>\n      <td>female</td>\n      <td>18.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2657</td>\n      <td>7.2292</td>\n      <td>NaN</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>901</td>\n      <td>3</td>\n      <td>Davies, Mr. John Samuel</td>\n      <td>male</td>\n      <td>21.0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>A/4 48871</td>\n      <td>24.1500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"train = pd.read_csv(\"/kaggle/input/titanic/train.csv\")\ntrain.head(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:22:51.341194Z","iopub.execute_input":"2025-10-08T17:22:51.341492Z","iopub.status.idle":"2025-10-08T17:22:51.368182Z","shell.execute_reply.started":"2025-10-08T17:22:51.341469Z","shell.execute_reply":"2025-10-08T17:22:51.366828Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n5            6         0       3   \n6            7         0       1   \n7            8         0       3   \n8            9         1       3   \n9           10         1       2   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n5                                   Moran, Mr. James    male   NaN      0   \n6                            McCarthy, Mr. Timothy J    male  54.0      0   \n7                     Palsson, Master. Gosta Leonard    male   2.0      3   \n8  Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)  female  27.0      0   \n9                Nasser, Mrs. Nicholas (Adele Achem)  female  14.0      1   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  \n5      0            330877   8.4583   NaN        Q  \n6      0             17463  51.8625   E46        S  \n7      1            349909  21.0750   NaN        S  \n8      2            347742  11.1333   NaN        S  \n9      0            237736  30.0708   NaN        C  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Moran, Mr. James</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330877</td>\n      <td>8.4583</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>0</td>\n      <td>1</td>\n      <td>McCarthy, Mr. Timothy J</td>\n      <td>male</td>\n      <td>54.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>17463</td>\n      <td>51.8625</td>\n      <td>E46</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Palsson, Master. Gosta Leonard</td>\n      <td>male</td>\n      <td>2.0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>349909</td>\n      <td>21.0750</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>9</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)</td>\n      <td>female</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>347742</td>\n      <td>11.1333</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10</td>\n      <td>1</td>\n      <td>2</td>\n      <td>Nasser, Mrs. Nicholas (Adele Achem)</td>\n      <td>female</td>\n      <td>14.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>237736</td>\n      <td>30.0708</td>\n      <td>NaN</td>\n      <td>C</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"# print(train.shape)\n# print(test.shape)\ntrain_len = len(train)\ntrain_len","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:51:09.299359Z","iopub.execute_input":"2025-10-08T17:51:09.299851Z","iopub.status.idle":"2025-10-08T17:51:09.306827Z","shell.execute_reply.started":"2025-10-08T17:51:09.299821Z","shell.execute_reply":"2025-10-08T17:51:09.305672Z"}},"outputs":[{"execution_count":110,"output_type":"execute_result","data":{"text/plain":"891"},"metadata":{}}],"execution_count":110},{"cell_type":"code","source":"dataset = pd.concat([train,test])\ndataset","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:22:54.809870Z","iopub.execute_input":"2025-10-08T17:22:54.810172Z","iopub.status.idle":"2025-10-08T17:22:54.838540Z","shell.execute_reply.started":"2025-10-08T17:22:54.810150Z","shell.execute_reply":"2025-10-08T17:22:54.837439Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"     PassengerId  Survived  Pclass  \\\n0              1       0.0       3   \n1              2       1.0       1   \n2              3       1.0       3   \n3              4       1.0       1   \n4              5       0.0       3   \n..           ...       ...     ...   \n413         1305       NaN       3   \n414         1306       NaN       1   \n415         1307       NaN       3   \n416         1308       NaN       3   \n417         1309       NaN       3   \n\n                                                  Name     Sex   Age  SibSp  \\\n0                              Braund, Mr. Owen Harris    male  22.0      1   \n1    Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                               Heikkinen, Miss. Laina  female  26.0      0   \n3         Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                             Allen, Mr. William Henry    male  35.0      0   \n..                                                 ...     ...   ...    ...   \n413                                 Spector, Mr. Woolf    male   NaN      0   \n414                       Oliva y Ocana, Dona. Fermina  female  39.0      0   \n415                       Saether, Mr. Simon Sivertsen    male  38.5      0   \n416                                Ware, Mr. Frederick    male   NaN      0   \n417                           Peter, Master. Michael J    male   NaN      1   \n\n     Parch              Ticket      Fare Cabin Embarked  \n0        0           A/5 21171    7.2500   NaN        S  \n1        0            PC 17599   71.2833   C85        C  \n2        0    STON/O2. 3101282    7.9250   NaN        S  \n3        0              113803   53.1000  C123        S  \n4        0              373450    8.0500   NaN        S  \n..     ...                 ...       ...   ...      ...  \n413      0           A.5. 3236    8.0500   NaN        S  \n414      0            PC 17758  108.9000  C105        C  \n415      0  SOTON/O.Q. 3101262    7.2500   NaN        S  \n416      0              359309    8.0500   NaN        S  \n417      1                2668   22.3583   NaN        C  \n\n[1309 rows x 12 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1.0</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>1305</td>\n      <td>NaN</td>\n      <td>3</td>\n      <td>Spector, Mr. Woolf</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>A.5. 3236</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>1306</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>Oliva y Ocana, Dona. Fermina</td>\n      <td>female</td>\n      <td>39.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>PC 17758</td>\n      <td>108.9000</td>\n      <td>C105</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>415</th>\n      <td>1307</td>\n      <td>NaN</td>\n      <td>3</td>\n      <td>Saether, Mr. Simon Sivertsen</td>\n      <td>male</td>\n      <td>38.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>SOTON/O.Q. 3101262</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>416</th>\n      <td>1308</td>\n      <td>NaN</td>\n      <td>3</td>\n      <td>Ware, Mr. Frederick</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>359309</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>417</th>\n      <td>1309</td>\n      <td>NaN</td>\n      <td>3</td>\n      <td>Peter, Master. Michael J</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2668</td>\n      <td>22.3583</td>\n      <td>NaN</td>\n      <td>C</td>\n    </tr>\n  </tbody>\n</table>\n<p>1309 rows × 12 columns</p>\n</div>"},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"# train.dtypes","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:22:55.759833Z","iopub.execute_input":"2025-10-08T17:22:55.760127Z","iopub.status.idle":"2025-10-08T17:22:55.764558Z","shell.execute_reply.started":"2025-10-08T17:22:55.760107Z","shell.execute_reply":"2025-10-08T17:22:55.762824Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"# train.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:22:56.633352Z","iopub.execute_input":"2025-10-08T17:22:56.633700Z","iopub.status.idle":"2025-10-08T17:22:56.637707Z","shell.execute_reply.started":"2025-10-08T17:22:56.633673Z","shell.execute_reply":"2025-10-08T17:22:56.636687Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"numeric = ['PassengerId', 'Survived', 'Pclass', 'Age', 'SibSp', 'Parch', 'Fare']\n\n\n# train.dtypes\n# PassengerId      int64\n# Survived         int64\n# Pclass           int64\n# Name            object\n# Sex             object\n# Age            float64\n# SibSp            int64\n# Parch            int64\n# Ticket          object\n# Fare           float64\n# Cabin           object\n# Embarked        object","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:22:59.051277Z","iopub.execute_input":"2025-10-08T17:22:59.051660Z","iopub.status.idle":"2025-10-08T17:22:59.056114Z","shell.execute_reply.started":"2025-10-08T17:22:59.051627Z","shell.execute_reply":"2025-10-08T17:22:59.054889Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"# train.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:00.671643Z","iopub.execute_input":"2025-10-08T17:23:00.671951Z","iopub.status.idle":"2025-10-08T17:23:00.675857Z","shell.execute_reply.started":"2025-10-08T17:23:00.671929Z","shell.execute_reply":"2025-10-08T17:23:00.674691Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"# train2 = train.copy()  # Cria uma cópia do DataFrame\n# train2 = train2.drop(columns=['Ticket', 'Name', 'PassengerId'])  # Remove colunas","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:00.943192Z","iopub.execute_input":"2025-10-08T17:23:00.943489Z","iopub.status.idle":"2025-10-08T17:23:00.947288Z","shell.execute_reply.started":"2025-10-08T17:23:00.943466Z","shell.execute_reply":"2025-10-08T17:23:00.946008Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"# for i in train2.columns:\n#     print(i, train2[i].unique())\n# # train.unique","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:01.241927Z","iopub.execute_input":"2025-10-08T17:23:01.242210Z","iopub.status.idle":"2025-10-08T17:23:01.246032Z","shell.execute_reply.started":"2025-10-08T17:23:01.242191Z","shell.execute_reply":"2025-10-08T17:23:01.245060Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"# # train.dtypes\n# # PassengerId      int64\n# # Survived         int64\n# # Pclass           int64\n# # Name            object\n# # Sex             object\n# # Age            float64\n# # SibSp            int64\n# # Parch            int64\n# # Ticket          object\n# # Fare           float64\n# # Cabin           object\n# # Embarked        object\n\n# # train2 = train.copy()\n# # train2[numeric] = train2[numeric].astype(dtype='float')\n# # pd.to_numeric(train2[\"PassengerId\"], dtype='float')\n\n\n# numeric = ['PassengerId', 'Survived', 'Pclass', 'Age', 'SibSp', 'Parch', 'Fare']\n\n# sns.heatmap(train[numeric].corr(), annot=True, fmt=\".2\", cmap=\"coolwarm\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:01.483894Z","iopub.execute_input":"2025-10-08T17:23:01.484201Z","iopub.status.idle":"2025-10-08T17:23:01.489016Z","shell.execute_reply.started":"2025-10-08T17:23:01.484180Z","shell.execute_reply":"2025-10-08T17:23:01.488021Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"# male_fem_dict = {\n#     \"male\": 0,\n#     \"female\": 1 \n# }\n\n# train2 = train.copy()\n# # train2[\"Sex\"].apply(lambda x: 0 if x == \"male\" else 1)\n\n# train2[\"Sex\"] = train2[\"Sex\"].map(male_fem_dict)\n# train2[\"Sex\"]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:01.731169Z","iopub.execute_input":"2025-10-08T17:23:01.731479Z","iopub.status.idle":"2025-10-08T17:23:01.735912Z","shell.execute_reply.started":"2025-10-08T17:23:01.731456Z","shell.execute_reply":"2025-10-08T17:23:01.734832Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"# numeric2 = ['PassengerId', 'Survived', 'Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'Sex']\n\n# sns.heatmap(train2[numeric2].corr(), annot=True, fmt=\".2\", cmap=\"coolwarm\")\n\n\n# ################################################################################################################################\n# # High Degree: Values between ±0.50 and ±1 suggest a strong correlation.\n\n# # Moderate Degree: Values between ±0.30 and ±0.49 indicate a moderate correlation.\n\n# # Low Degree: Values below +0.29 are considered a weak correlation.\n\n# # No Correlation: A value of zero implies no relationship.","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:03.380283Z","iopub.execute_input":"2025-10-08T17:23:03.380636Z","iopub.status.idle":"2025-10-08T17:23:03.384827Z","shell.execute_reply.started":"2025-10-08T17:23:03.380548Z","shell.execute_reply":"2025-10-08T17:23:03.383707Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"# train3 = train2[train2['Sex'] == 1].copy()\n\n# # # Group by Age and Survival\n# # survival_counts = train.groupby([\"Age\", \"Survived\"]).size().unstack()\n\n# # # Plot\n# # ax = survival_counts.plot(kind=\"bar\", stacked=True, figsize=(15,6))\n\n\n# surv = train3.groupby([\"Sex\", \"Survived\"]).size().unstack()\n\n# ax = surv.plot(kind=\"bar\", stacked=False, figsize=(15,6))\n\n# for container in ax.containers:\n#     ax.bar_label(container, label_type=\"center\")\n\n# plt.show()\n\n# # train4 = train2[train2['Sex'] == 0].copy()\n# # print(\"\\nb\", train4.groupby([\"Sex\", \"Survived\"]).size().unstack())\n\n# #Não adianta usar correlação quando se tem apenas um valor, no caso, train3 tem apenas o sexo feminino.\n# # Logo, não consegue calcular a correlação com a variável \"Survived\" por exemplo.\n# # sns.heatmap(train3[[\"Sex\", \"Survived\"]].corr(), annot=True, fmt=\".2\", cmap=\"coolwarm\")\n\n# # train3[\"Sex\"].plot(kind=\"bar\", stacked=True, figsize=(15,6))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:03.711372Z","iopub.execute_input":"2025-10-08T17:23:03.711773Z","iopub.status.idle":"2025-10-08T17:23:03.715613Z","shell.execute_reply.started":"2025-10-08T17:23:03.711746Z","shell.execute_reply":"2025-10-08T17:23:03.714446Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"# dict_m_f = {\n#     \"male\": 0,\n#     \"female\": 1\n# }\n\n# train[\"Sex\"] = train[\"Sex\"].map(dict_m_f)\n# train.head(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:04.229121Z","iopub.execute_input":"2025-10-08T17:23:04.229454Z","iopub.status.idle":"2025-10-08T17:23:04.233123Z","shell.execute_reply.started":"2025-10-08T17:23:04.229429Z","shell.execute_reply":"2025-10-08T17:23:04.232035Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"dict_m_f = {\n    \"male\": 0,\n    \"female\": 1\n}\ndataset[\"Sex\"] = dataset[\"Sex\"].map(dict_m_f)\ndataset.head(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:05.740113Z","iopub.execute_input":"2025-10-08T17:23:05.740412Z","iopub.status.idle":"2025-10-08T17:23:05.760200Z","shell.execute_reply.started":"2025-10-08T17:23:05.740392Z","shell.execute_reply":"2025-10-08T17:23:05.759123Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1       0.0       3   \n1            2       1.0       1   \n2            3       1.0       3   \n3            4       1.0       1   \n4            5       0.0       3   \n5            6       0.0       3   \n6            7       0.0       1   \n7            8       0.0       3   \n8            9       1.0       3   \n9           10       1.0       2   \n\n                                                Name  Sex   Age  SibSp  Parch  \\\n0                            Braund, Mr. Owen Harris    0  22.0      1      0   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...    1  38.0      1      0   \n2                             Heikkinen, Miss. Laina    1  26.0      0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)    1  35.0      1      0   \n4                           Allen, Mr. William Henry    0  35.0      0      0   \n5                                   Moran, Mr. James    0   NaN      0      0   \n6                            McCarthy, Mr. Timothy J    0  54.0      0      0   \n7                     Palsson, Master. Gosta Leonard    0   2.0      3      1   \n8  Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)    1  27.0      0      2   \n9                Nasser, Mrs. Nicholas (Adele Achem)    1  14.0      1      0   \n\n             Ticket     Fare Cabin Embarked  \n0         A/5 21171   7.2500   NaN        S  \n1          PC 17599  71.2833   C85        C  \n2  STON/O2. 3101282   7.9250   NaN        S  \n3            113803  53.1000  C123        S  \n4            373450   8.0500   NaN        S  \n5            330877   8.4583   NaN        Q  \n6             17463  51.8625   E46        S  \n7            349909  21.0750   NaN        S  \n8            347742  11.1333   NaN        S  \n9            237736  30.0708   NaN        C  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>0</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>1</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1.0</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>1</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>0</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Moran, Mr. James</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330877</td>\n      <td>8.4583</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>McCarthy, Mr. Timothy J</td>\n      <td>0</td>\n      <td>54.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>17463</td>\n      <td>51.8625</td>\n      <td>E46</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Palsson, Master. Gosta Leonard</td>\n      <td>0</td>\n      <td>2.0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>349909</td>\n      <td>21.0750</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>9</td>\n      <td>1.0</td>\n      <td>3</td>\n      <td>Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)</td>\n      <td>1</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>347742</td>\n      <td>11.1333</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10</td>\n      <td>1.0</td>\n      <td>2</td>\n      <td>Nasser, Mrs. Nicholas (Adele Achem)</td>\n      <td>1</td>\n      <td>14.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>237736</td>\n      <td>30.0708</td>\n      <td>NaN</td>\n      <td>C</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":18},{"cell_type":"code","source":"# dataset[\"Sex\"].unique()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:06.237460Z","iopub.execute_input":"2025-10-08T17:23:06.237831Z","iopub.status.idle":"2025-10-08T17:23:06.241933Z","shell.execute_reply.started":"2025-10-08T17:23:06.237805Z","shell.execute_reply":"2025-10-08T17:23:06.240500Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"# # ax = plt.hist(train[\"Age\"])\n\n# surv = train[\"Age\"].value_counts().sort_index() #retorna uma lista\n# # print(type(surv))\n# # plt.figure(figsize=(15,6))\n# ax = surv.plot(kind=\"bar\", stacked=True, figsize=(15,6))\n\n# # for i in ax.containers():\n# #     ax.bar_plot(i, label_type=\"center\")\n\n\n# mean_age = train[\"Age\"].mean()\n# median_age = train[\"Age\"].median()\n# moda_age = train[\"Age\"].mode()[0] #retorna uma serie, então pegamos a primeira\n\n# plt.axvline(x=mean_age, color=\"red\")\n# plt.axvline(x=median_age, color=\"green\")\n# plt.axvline(x=median_age, color=\"yellow\")\n\n# plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:06.864324Z","iopub.execute_input":"2025-10-08T17:23:06.864671Z","iopub.status.idle":"2025-10-08T17:23:06.869696Z","shell.execute_reply.started":"2025-10-08T17:23:06.864644Z","shell.execute_reply":"2025-10-08T17:23:06.868667Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"# #remove os valores específicos de SibSp (os valores que estão no unique) e depois calcula a correlação com os outros atributos\n# def test_corr():\n#     org_cp = train.copy()\n#     print(train.select_dtypes(include=[\"number\"]).corr())\n#     print(\"########################################################\")\n#     for tam  in range(1, len(org_cp[\"SibSp\"].unique()) + 1): #tamanhos das area de selecao. range é exclusivo, logo, +1\n#         # print(\"TAM:\", tam)\n#         for pos in range(len(org_cp[\"SibSp\"].unique()) - tam + 1): #posicao inicial do elemento que sera removido\n#             # print(\"pos:\", pos)\n#             remover = org_cp[\"SibSp\"].unique()[pos:pos+tam] #pega a lista de valores que serao removidos\n#             train_filtrado = org_cp[~org_cp[\"SibSp\"].isin(remover)]\n#             train_numerico = train_filtrado.select_dtypes(include=[\"number\"])\n#             # org_cp[\"SibSp\"].delete(remover) #remove todas as linhas da coluna SibSp que sejam iguais ao da lista remover\n#             print(train_numerico.corr())\n#             print(\"removidos:\", remover)\n#             print(\"################################################\")\n#             # sns.heatmap(train_numerico, annot=False, fmt=\".2\", cmap=\"coolwarm\") #calcula a correlação\n\n# print(train[\"SibSp\"].unique())\n# # test_corr()\n# print(\"\\naqui: \", train[\"SibSp\"].unique().shape)\n# print(\"\\naqui: \", len(train[\"SibSp\"].unique()))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:14.244626Z","iopub.execute_input":"2025-10-08T17:23:14.244967Z","iopub.status.idle":"2025-10-08T17:23:14.249481Z","shell.execute_reply.started":"2025-10-08T17:23:14.244942Z","shell.execute_reply":"2025-10-08T17:23:14.248213Z"}},"outputs":[],"execution_count":24},{"cell_type":"code","source":"# df103 = train[~train[\"SibSp\"].isin([1,0,3])]\n# print(np.max(train[\"Age\"]))\n# plt.hist(df103[\"Age\"].dropna(), bins=50, alpha=0.7, edgecolor=\"black\")\n# # train[\"Age\"].plot(kind=\"bar\", stacked=False, figsize=(16,5))\n# plt.axvline(df103[\"Age\"].median(), color=\"black\")\n# plt.axvline(df103[\"Age\"].mean(), color=\"Red\")\n# # plt.axvline(train[\"Age\"].mode())\n# # train.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:14.430257Z","iopub.execute_input":"2025-10-08T17:23:14.430543Z","iopub.status.idle":"2025-10-08T17:23:14.434873Z","shell.execute_reply.started":"2025-10-08T17:23:14.430522Z","shell.execute_reply":"2025-10-08T17:23:14.433773Z"}},"outputs":[],"execution_count":25},{"cell_type":"code","source":"# df10 = train[~train[\"SibSp\"].isin([1,0])]\n# plt.hist(df10[\"Age\"].dropna(), bins=50, alpha=0.7, edgecolor=\"black\")\n# # train[\"Age\"].plot(kind=\"bar\", stacked=False, figsize=(16,5))\n# plt.axvline(df10[\"Age\"].median(), color=\"black\")\n# plt.axvline(df10[\"Age\"].mean(), color=\"Red\")\n# print(\"df10['Age]\", df10[\"Age\"].median())\n# print(\"df10['Age]\", df10[\"Age\"].mean())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:14.609929Z","iopub.execute_input":"2025-10-08T17:23:14.610267Z","iopub.status.idle":"2025-10-08T17:23:14.615098Z","shell.execute_reply.started":"2025-10-08T17:23:14.610236Z","shell.execute_reply":"2025-10-08T17:23:14.613876Z"}},"outputs":[],"execution_count":26},{"cell_type":"code","source":"# df10.head(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:14.796876Z","iopub.execute_input":"2025-10-08T17:23:14.797181Z","iopub.status.idle":"2025-10-08T17:23:14.800751Z","shell.execute_reply.started":"2025-10-08T17:23:14.797160Z","shell.execute_reply":"2025-10-08T17:23:14.799782Z"}},"outputs":[],"execution_count":27},{"cell_type":"code","source":"# df1 = train[~train[\"SibSp\"].isin([1])]\n# plt.hist(df1[\"Age\"].dropna(), bins=50, alpha=0.7, edgecolor=\"black\")\n# # train[\"Age\"].plot(kind=\"bar\", stacked=False, figsize=(16,5))\n# plt.axvline(df1[\"Age\"].median(), color=\"black\")\n# plt.axvline(df1[\"Age\"].mean(), color=\"Red\")\n# print(\"df1['Age]\", df1[\"Age\"].median())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:14.978849Z","iopub.execute_input":"2025-10-08T17:23:14.979163Z","iopub.status.idle":"2025-10-08T17:23:14.983078Z","shell.execute_reply.started":"2025-10-08T17:23:14.979137Z","shell.execute_reply":"2025-10-08T17:23:14.981902Z"}},"outputs":[],"execution_count":28},{"cell_type":"code","source":"# # df1 = train[~train[\"SibSp\"].isin([1])]\n# plt.hist(train[\"Age\"].dropna(), bins=50, alpha=0.7, edgecolor=\"black\")\n# # train[\"Age\"].plot(kind=\"bar\", stacked=False, figsize=(16,5))\n# plt.axvline(train[\"Age\"].median(), color=\"black\")\n# plt.axvline(train[\"Age\"].mean(), color=\"Red\")\n# print(\"df1['Age]\", train[\"Age\"].median())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:16.978007Z","iopub.execute_input":"2025-10-08T17:23:16.978301Z","iopub.status.idle":"2025-10-08T17:23:16.982751Z","shell.execute_reply.started":"2025-10-08T17:23:16.978280Z","shell.execute_reply":"2025-10-08T17:23:16.981304Z"}},"outputs":[],"execution_count":29},{"cell_type":"code","source":"# train2 = train.copy()\n# train2.loc[(train2[\"Age\"].isnull()) & (~train2[\"SibSp\"].isin([1,0,3])), \"Age\"] = int(df103[\"Age\"].median())\n# train2[\"Age\"].isnull().sum()\n# # train[\"Age\"].isnull().sum()\n\n# # print(len(~train2[\"Age\"].isin([1,0,3])), len(train2[\"Age\"].isnull()))\n# # print()\n# # print( ((train2[\"Age\"].isnull()) & (~train2[\"SibSp\"].isin([1,0,3]))).unique() )\n\n# # print(np.where(train[\"Age\"].isnull()) == )\n# # print(np.where(train2[(train2[\"Age\"].isnull()) & (~train2[\"Age\"].isin([1,0,3]))]))\n# # train2.head(10)\n\n# print(\"int(df10['Age'].median())\", int(df10[\"Age\"].median()))\n# train2.loc[(train2[\"Age\"].isnull()) & (~train2[\"SibSp\"].isin([1,0])), \"Age\"] = int(df10[\"Age\"].median())\n# train2[\"Age\"].isnull().sum()\n\n# print(\"int(df1['Age'].median())\", int(df1[\"Age\"].median()))\n# train2.loc[(train2[\"Age\"].isnull()) & (~train2[\"SibSp\"].isin([1])), \"Age\"] = int(df1[\"Age\"].median())\n# train2[\"Age\"].isnull().sum()\n\n# print(\"int(train['Age'].median())\", int(train[\"Age\"].median()))\n# train2.loc[(train2[\"Age\"].isnull() ), \"Age\"] = int(train[\"Age\"].median())\n# train2[\"Age\"].isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:17.170304Z","iopub.execute_input":"2025-10-08T17:23:17.170730Z","iopub.status.idle":"2025-10-08T17:23:17.175041Z","shell.execute_reply.started":"2025-10-08T17:23:17.170699Z","shell.execute_reply":"2025-10-08T17:23:17.173708Z"}},"outputs":[],"execution_count":30},{"cell_type":"code","source":"train2 = dataset.copy()\n# train2.loc[(train2[\"Age\"].isnull()) & (~train2[\"SibSp\"].isin([1,0,3])), \"Age\"] = int(df103[\"Age\"].median())\n# train2[\"Age\"].isnull().sum()\n# # train[\"Age\"].isnull().sum()\n\n# # print(len(~train2[\"Age\"].isin([1,0,3])), len(train2[\"Age\"].isnull()))\n# # print()\n# # print( ((train2[\"Age\"].isnull()) & (~train2[\"SibSp\"].isin([1,0,3]))).unique() )\n\n# # print(np.where(train[\"Age\"].isnull()) == )\n# # print(np.where(train2[(train2[\"Age\"].isnull()) & (~train2[\"Age\"].isin([1,0,3]))]))\n# # train2.head(10)\n\n# print(\"int(df10['Age'].median())\", int(df10[\"Age\"].median()))\n# train2.loc[(train2[\"Age\"].isnull()) & (~train2[\"SibSp\"].isin([1,0])), \"Age\"] = int(df10[\"Age\"].median())\n# train2[\"Age\"].isnull().sum()\n\n# print(\"int(df1['Age'].median())\", int(df1[\"Age\"].median()))\n# train2.loc[(train2[\"Age\"].isnull()) & (~train2[\"SibSp\"].isin([1])), \"Age\"] = int(df1[\"Age\"].median())\n# train2[\"Age\"].isnull().sum()\n\n# print(\"int(train['Age'].median())\", int(train[\"Age\"].median()))\ntrain2.loc[(train2[\"Age\"].isnull() ), \"Age\"] = int(dataset[\"Age\"].median())\ntrain2[\"Age\"].isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:17.346358Z","iopub.execute_input":"2025-10-08T17:23:17.346714Z","iopub.status.idle":"2025-10-08T17:23:17.358920Z","shell.execute_reply.started":"2025-10-08T17:23:17.346688Z","shell.execute_reply":"2025-10-08T17:23:17.357688Z"}},"outputs":[{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"0"},"metadata":{}}],"execution_count":31},{"cell_type":"code","source":"train3 = dataset.copy()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:17.530039Z","iopub.execute_input":"2025-10-08T17:23:17.530319Z","iopub.status.idle":"2025-10-08T17:23:17.536228Z","shell.execute_reply.started":"2025-10-08T17:23:17.530299Z","shell.execute_reply":"2025-10-08T17:23:17.534991Z"}},"outputs":[],"execution_count":32},{"cell_type":"code","source":"dataset = train2.copy()\ndataset.head(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:20.528612Z","iopub.execute_input":"2025-10-08T17:23:20.528943Z","iopub.status.idle":"2025-10-08T17:23:20.544744Z","shell.execute_reply.started":"2025-10-08T17:23:20.528921Z","shell.execute_reply":"2025-10-08T17:23:20.543738Z"}},"outputs":[{"execution_count":33,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1       0.0       3   \n1            2       1.0       1   \n2            3       1.0       3   \n3            4       1.0       1   \n4            5       0.0       3   \n5            6       0.0       3   \n6            7       0.0       1   \n7            8       0.0       3   \n8            9       1.0       3   \n9           10       1.0       2   \n\n                                                Name  Sex   Age  SibSp  Parch  \\\n0                            Braund, Mr. Owen Harris    0  22.0      1      0   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...    1  38.0      1      0   \n2                             Heikkinen, Miss. Laina    1  26.0      0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)    1  35.0      1      0   \n4                           Allen, Mr. William Henry    0  35.0      0      0   \n5                                   Moran, Mr. James    0  28.0      0      0   \n6                            McCarthy, Mr. Timothy J    0  54.0      0      0   \n7                     Palsson, Master. Gosta Leonard    0   2.0      3      1   \n8  Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)    1  27.0      0      2   \n9                Nasser, Mrs. Nicholas (Adele Achem)    1  14.0      1      0   \n\n             Ticket     Fare Cabin Embarked  \n0         A/5 21171   7.2500   NaN        S  \n1          PC 17599  71.2833   C85        C  \n2  STON/O2. 3101282   7.9250   NaN        S  \n3            113803  53.1000  C123        S  \n4            373450   8.0500   NaN        S  \n5            330877   8.4583   NaN        Q  \n6             17463  51.8625   E46        S  \n7            349909  21.0750   NaN        S  \n8            347742  11.1333   NaN        S  \n9            237736  30.0708   NaN        C  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>0</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>1</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1.0</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>1</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>0</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Moran, Mr. James</td>\n      <td>0</td>\n      <td>28.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330877</td>\n      <td>8.4583</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>McCarthy, Mr. Timothy J</td>\n      <td>0</td>\n      <td>54.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>17463</td>\n      <td>51.8625</td>\n      <td>E46</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Palsson, Master. Gosta Leonard</td>\n      <td>0</td>\n      <td>2.0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>349909</td>\n      <td>21.0750</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>9</td>\n      <td>1.0</td>\n      <td>3</td>\n      <td>Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)</td>\n      <td>1</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>347742</td>\n      <td>11.1333</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10</td>\n      <td>1.0</td>\n      <td>2</td>\n      <td>Nasser, Mrs. Nicholas (Adele Achem)</td>\n      <td>1</td>\n      <td>14.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>237736</td>\n      <td>30.0708</td>\n      <td>NaN</td>\n      <td>C</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":33},{"cell_type":"code","source":"# train[train[\"Age\"].isna()].shape\n# # train[train[\"Age\"] == np.nan]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:20.889213Z","iopub.execute_input":"2025-10-08T17:23:20.889645Z","iopub.status.idle":"2025-10-08T17:23:20.894343Z","shell.execute_reply.started":"2025-10-08T17:23:20.889508Z","shell.execute_reply":"2025-10-08T17:23:20.893108Z"}},"outputs":[],"execution_count":34},{"cell_type":"code","source":"# train[\"Age\"] = train2[\"Age\"].copy()\n# train.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:22.738386Z","iopub.execute_input":"2025-10-08T17:23:22.738815Z","iopub.status.idle":"2025-10-08T17:23:22.742814Z","shell.execute_reply.started":"2025-10-08T17:23:22.738790Z","shell.execute_reply":"2025-10-08T17:23:22.741709Z"}},"outputs":[],"execution_count":35},{"cell_type":"code","source":"# train.head(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:23.093656Z","iopub.execute_input":"2025-10-08T17:23:23.093980Z","iopub.status.idle":"2025-10-08T17:23:23.098047Z","shell.execute_reply.started":"2025-10-08T17:23:23.093956Z","shell.execute_reply":"2025-10-08T17:23:23.096912Z"}},"outputs":[],"execution_count":36},{"cell_type":"code","source":"# # plt.scatter(train[\"Age\"], train[\"Survived\"], edgecolors=\"black\")\n# survived = train[train[\"Survived\"]==1][\"Age\"]\n# not_surv = train[train[\"Survived\"]==0][\"Age\"]\n# plt.figure(figsize=(15,6))\n# plt.hist([survived, not_surv], bins=50, edgecolor=\"black\", alpha=0.7, label=[\"Survived\", \"Not Survived\"])\n# plt.xlabel=(\"Age\")\n# plt.ylabel=(\"People\")\n# plt.legend()\n# plt.show()\n# # plt.hist(train[\"Age\"], bins=20, edgecolor=\"black\")\n# # plt.","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:25.472854Z","iopub.execute_input":"2025-10-08T17:23:25.473163Z","iopub.status.idle":"2025-10-08T17:23:25.477400Z","shell.execute_reply.started":"2025-10-08T17:23:25.473140Z","shell.execute_reply":"2025-10-08T17:23:25.476009Z"}},"outputs":[],"execution_count":37},{"cell_type":"code","source":"# train.isnull().sum()\n# train[[\"Pclass\", \"SibSp\"]]\n# # train[\"SibSp\"].unique()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:26.924413Z","iopub.execute_input":"2025-10-08T17:23:26.924818Z","iopub.status.idle":"2025-10-08T17:23:26.929731Z","shell.execute_reply.started":"2025-10-08T17:23:26.924789Z","shell.execute_reply":"2025-10-08T17:23:26.927997Z"}},"outputs":[],"execution_count":38},{"cell_type":"code","source":"# train[\"Age\"] = train2[\"Age\"]\n# train[\"Age\"].isna().sum()\n# train.head(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:27.987079Z","iopub.execute_input":"2025-10-08T17:23:27.987388Z","iopub.status.idle":"2025-10-08T17:23:27.991152Z","shell.execute_reply.started":"2025-10-08T17:23:27.987365Z","shell.execute_reply":"2025-10-08T17:23:27.990141Z"}},"outputs":[],"execution_count":39},{"cell_type":"code","source":"# def parch_func():\n#     train2 = train.copy()\n#     unicos_parch = train2[\"Parch\"].unique()\n\n#     print(\"primeiro:\\n\", train2.select_dtypes(include=[\"number\"]).corr())\n    \n#     print(unicos_parch)\n#     for size in range(1, len(unicos_parch) + 1):\n#         # print(size, \"#####\")\n#         for parch in range(0, len(unicos_parch) - size + 1):\n#             # print(parch, parch + size)\n#             remover = unicos_parch[parch:parch+size]\n#             print(\"removidos:\", remover)\n#             # train_numerico = train_filtrado.select_dtypes(include=[\"number\"])\n\n            \n#             filtrados = train2[~train2[\"Parch\"].isin(remover)]\n#             train2_numerico = filtrados.select_dtypes(include=[\"number\"]) #?\n#             print(train2_numerico.corr())\n#             # print(train2[\"Parch\"].unique())\n            \n\n# var = 0\n# if _ == 1:\n#     parch_func()\n# else:\n#     print(\"Não imprime nada (O.O)\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:28.751085Z","iopub.execute_input":"2025-10-08T17:23:28.751374Z","iopub.status.idle":"2025-10-08T17:23:28.755714Z","shell.execute_reply.started":"2025-10-08T17:23:28.751352Z","shell.execute_reply":"2025-10-08T17:23:28.754315Z"}},"outputs":[],"execution_count":40},{"cell_type":"code","source":"# from scipy.stats import chi2_contingency\n\n# def chi_squared_test(categorical_var, target_var):\n#     mask = train[categorical_var].notna()\n#     tabela = pd.crosstab(train[mask][categorical_var], train[mask][target_var])\n#     chi2, p_value, dof, expected = chi2_contingency(tabela)\n#     print(\"CHI2:\", chi2, \"\\n\")\n#     print(\"P-value:\", p_value, \"\\n\")\n#     print(\"DOF:\", dof, \"\\n\")\n#     # print(\"EXPECTED:\\n\", expected, \"\\n\")\n#     if p_value < 0.05:\n#         print(f\"{categorical_var} -- Significancia estatistica (p<0.05):\")\n#     else:\n#         print(f\"{categorical_var} -- SEM significancia estatistica (p>=0.05):\")\n\n\n\n# print(\"--chi com Embarked\", chi_squared_test(\"Embarked\", \"Survived\"), \"\\n\\n\")\n# print(\"---------------------------------------------------------------------------------\")\n# print(\"--chi com Cabin\", chi_squared_test(\"Cabin\", \"Survived\"), \"\\n\\n\")\n# print(\"---------------------------------------------------------------------------------\")\n# print(\"--chi com Ticket\", chi_squared_test(\"Ticket\", \"Survived\"), \"\\n\\n\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:30.215995Z","iopub.execute_input":"2025-10-08T17:23:30.216305Z","iopub.status.idle":"2025-10-08T17:23:30.220461Z","shell.execute_reply.started":"2025-10-08T17:23:30.216282Z","shell.execute_reply":"2025-10-08T17:23:30.219310Z"}},"outputs":[],"execution_count":41},{"cell_type":"code","source":"# tabela = pd.crosstab(train['Embarked'], train['Survived'], margins=True)\n# print(tabela)\n\n# taxas = train.groupby('Embarked')['Survived'].agg(['count', 'mean', 'sum'])\n# taxas.columns = ['Total_Passengers', 'Survival_Rate', 'Total_Survived']\n# print(\"\\nSurvival rates by Embarked:\")\n# print(taxas)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:30.576005Z","iopub.execute_input":"2025-10-08T17:23:30.576301Z","iopub.status.idle":"2025-10-08T17:23:30.580057Z","shell.execute_reply.started":"2025-10-08T17:23:30.576282Z","shell.execute_reply":"2025-10-08T17:23:30.578945Z"}},"outputs":[],"execution_count":42},{"cell_type":"code","source":"# train2 = train.copy()\n# # train2 = dataset.copy()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:32.805240Z","iopub.execute_input":"2025-10-08T17:23:32.805532Z","iopub.status.idle":"2025-10-08T17:23:32.810161Z","shell.execute_reply.started":"2025-10-08T17:23:32.805502Z","shell.execute_reply":"2025-10-08T17:23:32.808712Z"}},"outputs":[],"execution_count":43},{"cell_type":"code","source":"# train3 = train2.copy()\n# def transform_embarked_to_numeric(df):\n#     dict_embarked = {\n#         'C': 0,\n#         'Q': 1,\n#         'S': 2,\n#         np.nan: 2\n#     }\n#     df[\"Embarked\"] = df[\"Embarked\"].map(dict_embarked).copy()\n#     return df[\"Embarked\"]\n    \n\n# train2[\"Embarked\"] = transform_embarked_to_numeric(train2)\n# # train2.head(10)\n# # train[\"Embarked\"] = train2[\"Embarked\"].copy()\n# train = train.drop(columns=\"Embaked\", axis=1)\n# # train.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:33.922982Z","iopub.execute_input":"2025-10-08T17:23:33.923297Z","iopub.status.idle":"2025-10-08T17:23:33.928275Z","shell.execute_reply.started":"2025-10-08T17:23:33.923272Z","shell.execute_reply":"2025-10-08T17:23:33.926753Z"}},"outputs":[],"execution_count":44},{"cell_type":"code","source":"def transform_embarked_to_numeric(df):\n    dict_embarked = {\n        'C': 0,\n        'Q': 1,\n        'S': 2,\n        np.nan: 2\n    }\n    df[\"Embarked\"] = df[\"Embarked\"].map(dict_embarked).copy()\n    return df[\"Embarked\"]\n    \n\ntrain2[\"Embarked\"] = transform_embarked_to_numeric(train2)\n# train2.head(10)\n\ndataset[\"Embarked\"] = train2[\"Embarked\"].copy()\ndataset.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:35.186066Z","iopub.execute_input":"2025-10-08T17:23:35.186354Z","iopub.status.idle":"2025-10-08T17:23:35.204451Z","shell.execute_reply.started":"2025-10-08T17:23:35.186333Z","shell.execute_reply":"2025-10-08T17:23:35.203683Z"}},"outputs":[{"execution_count":45,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1       0.0       3   \n1            2       1.0       1   \n2            3       1.0       3   \n3            4       1.0       1   \n4            5       0.0       3   \n\n                                                Name  Sex   Age  SibSp  Parch  \\\n0                            Braund, Mr. Owen Harris    0  22.0      1      0   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...    1  38.0      1      0   \n2                             Heikkinen, Miss. Laina    1  26.0      0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)    1  35.0      1      0   \n4                           Allen, Mr. William Henry    0  35.0      0      0   \n\n             Ticket     Fare Cabin  Embarked  \n0         A/5 21171   7.2500   NaN         2  \n1          PC 17599  71.2833   C85         0  \n2  STON/O2. 3101282   7.9250   NaN         2  \n3            113803  53.1000  C123         2  \n4            373450   8.0500   NaN         2  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>0</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>1</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1.0</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>1</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>0</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":45},{"cell_type":"code","source":"# # train[\"Cabin\"].unique()\n# train2 = train.copy()\n# train3 = train2.copy()\n# train3 = train3.dropna(subset=[\"Cabin\"])\n# # train3.head(10)\n# print(train3[\"Cabin\"].isnull().sum())\n\n# train3[\"Cabin\"] = train3[\"Cabin\"].replace(r'\\d+', '', regex=True)\n# train3[\"Cabin\"].unique()\n\n# agrupamemto_cabin = train3.groupby([\"Cabin\"]).agg({\"Survived\": [\"count\", \"mean\", \"sum\"]})\n# print(agrupamemto_cabin)\n\n# # train3 = train2[\"Cabin\"].dropna().copy()\n# # train.head()\n# # train3.isnull().sum()\n# # [string for string in train3['Cabin']]\n# # [[int(s) for s in string.split() if s.isdigit()] for string in train3[\"Cabin\"]]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:37.483311Z","iopub.execute_input":"2025-10-08T17:23:37.483658Z","iopub.status.idle":"2025-10-08T17:23:37.488011Z","shell.execute_reply.started":"2025-10-08T17:23:37.483632Z","shell.execute_reply":"2025-10-08T17:23:37.487030Z"}},"outputs":[],"execution_count":46},{"cell_type":"code","source":"train.head(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:37.825651Z","iopub.execute_input":"2025-10-08T17:23:37.825964Z","iopub.status.idle":"2025-10-08T17:23:37.844031Z","shell.execute_reply.started":"2025-10-08T17:23:37.825942Z","shell.execute_reply":"2025-10-08T17:23:37.843037Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"execution_count":47,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n5            6         0       3   \n6            7         0       1   \n7            8         0       3   \n8            9         1       3   \n9           10         1       2   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n5                                   Moran, Mr. James    male   NaN      0   \n6                            McCarthy, Mr. Timothy J    male  54.0      0   \n7                     Palsson, Master. Gosta Leonard    male   2.0      3   \n8  Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)  female  27.0      0   \n9                Nasser, Mrs. Nicholas (Adele Achem)  female  14.0      1   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  \n5      0            330877   8.4583   NaN        Q  \n6      0             17463  51.8625   E46        S  \n7      1            349909  21.0750   NaN        S  \n8      2            347742  11.1333   NaN        S  \n9      0            237736  30.0708   NaN        C  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Moran, Mr. James</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330877</td>\n      <td>8.4583</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>0</td>\n      <td>1</td>\n      <td>McCarthy, Mr. Timothy J</td>\n      <td>male</td>\n      <td>54.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>17463</td>\n      <td>51.8625</td>\n      <td>E46</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Palsson, Master. Gosta Leonard</td>\n      <td>male</td>\n      <td>2.0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>349909</td>\n      <td>21.0750</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>9</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)</td>\n      <td>female</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>347742</td>\n      <td>11.1333</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10</td>\n      <td>1</td>\n      <td>2</td>\n      <td>Nasser, Mrs. Nicholas (Adele Achem)</td>\n      <td>female</td>\n      <td>14.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>237736</td>\n      <td>30.0708</td>\n      <td>NaN</td>\n      <td>C</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":47},{"cell_type":"code","source":"# train2 = train.copy()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:39.360365Z","iopub.execute_input":"2025-10-08T17:23:39.360711Z","iopub.status.idle":"2025-10-08T17:23:39.364627Z","shell.execute_reply.started":"2025-10-08T17:23:39.360675Z","shell.execute_reply":"2025-10-08T17:23:39.363626Z"}},"outputs":[],"execution_count":48},{"cell_type":"code","source":"# cond_a = (train2[\"Ticket\"].str[0] == 'A')\n# cond_pc = (train2[\"Ticket\"].str.contains('PC|P.C'))\n# cond_ca = (train2[\"Ticket\"].str.contains('C.A|CA', na=False))\n# cond_sc = (train2[\"Ticket\"].str.contains('SC|S.C', na=False))\n# cond_wc = (train2[\"Ticket\"].str.contains('WC|W.C', na=False))\n# cond_soton = train2[\"Ticket\"].str.contains(\"SOTON|STON\", na=False)\n# non_cond_digit = (~train2[\"Ticket\"].str.isdigit())\n# # non_cond_digit\n# non_condition = ~cond_soton & ~cond_ca & ~cond_pc & ~cond_a & ~cond_sc & ~cond_wc & non_cond_digit\n# train2 = train2[non_condition]\n# train2","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:39.761909Z","iopub.execute_input":"2025-10-08T17:23:39.762189Z","iopub.status.idle":"2025-10-08T17:23:39.765831Z","shell.execute_reply.started":"2025-10-08T17:23:39.762168Z","shell.execute_reply":"2025-10-08T17:23:39.764795Z"}},"outputs":[],"execution_count":49},{"cell_type":"code","source":"# train2['Ticket'].str[0:3]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:41.299304Z","iopub.execute_input":"2025-10-08T17:23:41.299715Z","iopub.status.idle":"2025-10-08T17:23:41.303372Z","shell.execute_reply.started":"2025-10-08T17:23:41.299685Z","shell.execute_reply":"2025-10-08T17:23:41.302421Z"}},"outputs":[],"execution_count":50},{"cell_type":"code","source":"# train2['Ticket'].head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:41.632198Z","iopub.execute_input":"2025-10-08T17:23:41.632484Z","iopub.status.idle":"2025-10-08T17:23:41.636470Z","shell.execute_reply.started":"2025-10-08T17:23:41.632463Z","shell.execute_reply":"2025-10-08T17:23:41.635636Z"}},"outputs":[],"execution_count":51},{"cell_type":"code","source":"# train3 = train2[~train2['Ticket'].str.isdigit()].copy()\n# train2['Ticket'].str.isdigit()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:41.940201Z","iopub.execute_input":"2025-10-08T17:23:41.940505Z","iopub.status.idle":"2025-10-08T17:23:41.944187Z","shell.execute_reply.started":"2025-10-08T17:23:41.940480Z","shell.execute_reply":"2025-10-08T17:23:41.943135Z"}},"outputs":[],"execution_count":52},{"cell_type":"code","source":"# train3['Ticket'].unique()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:42.282556Z","iopub.execute_input":"2025-10-08T17:23:42.282912Z","iopub.status.idle":"2025-10-08T17:23:42.286893Z","shell.execute_reply.started":"2025-10-08T17:23:42.282888Z","shell.execute_reply":"2025-10-08T17:23:42.285873Z"}},"outputs":[],"execution_count":53},{"cell_type":"code","source":"# train2 = train2[non_condition]\n# train2\n# train2[\"Ticket\"].unique()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:42.717249Z","iopub.execute_input":"2025-10-08T17:23:42.717686Z","iopub.status.idle":"2025-10-08T17:23:42.721906Z","shell.execute_reply.started":"2025-10-08T17:23:42.717659Z","shell.execute_reply":"2025-10-08T17:23:42.720559Z"}},"outputs":[],"execution_count":54},{"cell_type":"code","source":"train.head(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:43.195439Z","iopub.execute_input":"2025-10-08T17:23:43.196109Z","iopub.status.idle":"2025-10-08T17:23:43.212485Z","shell.execute_reply.started":"2025-10-08T17:23:43.196065Z","shell.execute_reply":"2025-10-08T17:23:43.211441Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"execution_count":55,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n5            6         0       3   \n6            7         0       1   \n7            8         0       3   \n8            9         1       3   \n9           10         1       2   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n5                                   Moran, Mr. James    male   NaN      0   \n6                            McCarthy, Mr. Timothy J    male  54.0      0   \n7                     Palsson, Master. Gosta Leonard    male   2.0      3   \n8  Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)  female  27.0      0   \n9                Nasser, Mrs. Nicholas (Adele Achem)  female  14.0      1   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  \n5      0            330877   8.4583   NaN        Q  \n6      0             17463  51.8625   E46        S  \n7      1            349909  21.0750   NaN        S  \n8      2            347742  11.1333   NaN        S  \n9      0            237736  30.0708   NaN        C  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Moran, Mr. James</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330877</td>\n      <td>8.4583</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>0</td>\n      <td>1</td>\n      <td>McCarthy, Mr. Timothy J</td>\n      <td>male</td>\n      <td>54.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>17463</td>\n      <td>51.8625</td>\n      <td>E46</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Palsson, Master. Gosta Leonard</td>\n      <td>male</td>\n      <td>2.0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>349909</td>\n      <td>21.0750</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>9</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)</td>\n      <td>female</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>347742</td>\n      <td>11.1333</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10</td>\n      <td>1</td>\n      <td>2</td>\n      <td>Nasser, Mrs. Nicholas (Adele Achem)</td>\n      <td>female</td>\n      <td>14.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>237736</td>\n      <td>30.0708</td>\n      <td>NaN</td>\n      <td>C</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":55},{"cell_type":"code","source":"# train2 = train.copy()\n# numeric = [\"Pclass\", \"Sex\", \"Age\", \"SibSp\", \"Parch\", \"Fare\", \"Embarked\"]\n# train2[numeric].hist(figsize=(15,10), edgecolor=\"black\", bins=20, alpha=0.7)\n# # plt.tight_layout()\n# plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:45.074428Z","iopub.execute_input":"2025-10-08T17:23:45.074820Z","iopub.status.idle":"2025-10-08T17:23:45.078308Z","shell.execute_reply.started":"2025-10-08T17:23:45.074789Z","shell.execute_reply":"2025-10-08T17:23:45.077276Z"}},"outputs":[],"execution_count":56},{"cell_type":"code","source":"# train[\"Age\"].hist(bins=50, edgecolor=\"black\", figsize=(15,6), alpha=0.7)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:45.465604Z","iopub.execute_input":"2025-10-08T17:23:45.466019Z","iopub.status.idle":"2025-10-08T17:23:45.470441Z","shell.execute_reply.started":"2025-10-08T17:23:45.465976Z","shell.execute_reply":"2025-10-08T17:23:45.469347Z"}},"outputs":[],"execution_count":57},{"cell_type":"code","source":"# train[\"Fare\"].hist(bins=50, edgecolor=\"black\", figsize=(15,6), alpha=0.7)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:46.504657Z","iopub.execute_input":"2025-10-08T17:23:46.504973Z","iopub.status.idle":"2025-10-08T17:23:46.508752Z","shell.execute_reply.started":"2025-10-08T17:23:46.504950Z","shell.execute_reply":"2025-10-08T17:23:46.507720Z"}},"outputs":[],"execution_count":58},{"cell_type":"code","source":"# #fazer detecção de outlier em: Age e Fare, only....\n# def detect_outlier_quartiles(df, features, n):\n#     lista_de_todos_outliers = []\n#     for col in features:\n#         q1 = np.percentile(df[col], 25)\n#         q3 = np.percentile(df[col], 75)\n#         iqr = q3 - q1\n\n#         borda = iqr * 1.5 #1.5 é o valor padrão usado\n\n#         outliers_lista = df[(df[col] < q1 - borda) | (df[col] > q3 + borda)].index\n\n#         lista_de_todos_outliers.extend(outliers_lista)\n    \n#     contagem = Counter(lista_de_todos_outliers) #conta quantas vezes aparecem elementos alem da borda (outlier)\n#     linhas_com_outlier = [k for k, v in contagem.items() if v > n]\n\n#     return linhas_com_outlier\n\n\n# train2 = train.copy()\n\n# linhas_remover = detect_outlier_quartiles(train2, [\"Age\", \"Fare\"], 1)\n# print(type(linhas_remover))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:48.110282Z","iopub.execute_input":"2025-10-08T17:23:48.110638Z","iopub.status.idle":"2025-10-08T17:23:48.114810Z","shell.execute_reply.started":"2025-10-08T17:23:48.110612Z","shell.execute_reply":"2025-10-08T17:23:48.113788Z"}},"outputs":[],"execution_count":59},{"cell_type":"code","source":"#fazer detecção de outlier em: Age e Fare, only....\ndef detect_outlier_quartiles(df, features, n):\n    lista_de_todos_outliers = []\n    for col in features:\n        q1 = np.percentile(df[col], 25)\n        q3 = np.percentile(df[col], 75)\n        iqr = q3 - q1\n\n        borda = iqr * 1.5 #1.5 é o valor padrão usado\n\n        outliers_lista = df[(df[col] < q1 - borda) | (df[col] > q3 + borda)].index\n\n        lista_de_todos_outliers.extend(outliers_lista)\n    \n    contagem = Counter(lista_de_todos_outliers) #conta quantas vezes aparecem elementos alem da borda (outlier)\n    linhas_com_outlier = [k for k, v in contagem.items() if v > n]\n\n    return linhas_com_outlier\n\n\ntrain2 = dataset.copy()\n\nlinhas_remover = detect_outlier_quartiles(train2, [\"Age\", \"Fare\"], 1)\nprint(type(linhas_remover))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:48.510431Z","iopub.execute_input":"2025-10-08T17:23:48.510879Z","iopub.status.idle":"2025-10-08T17:23:48.524874Z","shell.execute_reply.started":"2025-10-08T17:23:48.510851Z","shell.execute_reply":"2025-10-08T17:23:48.523693Z"}},"outputs":[{"name":"stdout","text":"<class 'list'>\n","output_type":"stream"}],"execution_count":60},{"cell_type":"code","source":"# arr = np.array(linhas_remover)\n# arr.\n# linhas_remover.remove(305)\n# linhas_remover.remove(297)\n# print(len(linhas_remover))\n# linhas_remover\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:50.181542Z","iopub.execute_input":"2025-10-08T17:23:50.181925Z","iopub.status.idle":"2025-10-08T17:23:50.185730Z","shell.execute_reply.started":"2025-10-08T17:23:50.181899Z","shell.execute_reply":"2025-10-08T17:23:50.184708Z"}},"outputs":[],"execution_count":61},{"cell_type":"code","source":"train2.loc[linhas_remover]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:51.283842Z","iopub.execute_input":"2025-10-08T17:23:51.284133Z","iopub.status.idle":"2025-10-08T17:23:51.304337Z","shell.execute_reply.started":"2025-10-08T17:23:51.284113Z","shell.execute_reply":"2025-10-08T17:23:51.302901Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"execution_count":62,"output_type":"execute_result","data":{"text/plain":"     PassengerId  Survived  Pclass  \\\n96            97       0.0       1   \n96           988       NaN       1   \n152          153       0.0       3   \n152         1044       NaN       3   \n305          306       1.0       1   \n305         1197       NaN       1   \n\n                                                  Name  Sex    Age  SibSp  \\\n96                           Goldschmidt, Mr. George B    0  71.00      0   \n96   Cavendish, Mrs. Tyrell William (Julia Florence...    1  76.00      1   \n152                                   Meo, Mr. Alfonzo    0  55.50      0   \n152                                 Storey, Mr. Thomas    0  60.50      0   \n305                     Allison, Master. Hudson Trevor    0   0.92      1   \n305  Crosby, Mrs. Edward Gifford (Catherine Elizabe...    1  64.00      1   \n\n     Parch      Ticket      Fare    Cabin  Embarked  \n96       0    PC 17754   34.6542       A5         0  \n96       0       19877   78.8500      C46         2  \n152      0  A.5. 11206    8.0500      NaN         2  \n152      0        3701       NaN      NaN         2  \n305      2      113781  151.5500  C22 C26         2  \n305      1      112901   26.5500      B26         2  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>96</th>\n      <td>97</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>Goldschmidt, Mr. George B</td>\n      <td>0</td>\n      <td>71.00</td>\n      <td>0</td>\n      <td>0</td>\n      <td>PC 17754</td>\n      <td>34.6542</td>\n      <td>A5</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>96</th>\n      <td>988</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>Cavendish, Mrs. Tyrell William (Julia Florence...</td>\n      <td>1</td>\n      <td>76.00</td>\n      <td>1</td>\n      <td>0</td>\n      <td>19877</td>\n      <td>78.8500</td>\n      <td>C46</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>152</th>\n      <td>153</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Meo, Mr. Alfonzo</td>\n      <td>0</td>\n      <td>55.50</td>\n      <td>0</td>\n      <td>0</td>\n      <td>A.5. 11206</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>152</th>\n      <td>1044</td>\n      <td>NaN</td>\n      <td>3</td>\n      <td>Storey, Mr. Thomas</td>\n      <td>0</td>\n      <td>60.50</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3701</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>305</th>\n      <td>306</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Allison, Master. Hudson Trevor</td>\n      <td>0</td>\n      <td>0.92</td>\n      <td>1</td>\n      <td>2</td>\n      <td>113781</td>\n      <td>151.5500</td>\n      <td>C22 C26</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>305</th>\n      <td>1197</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>Crosby, Mrs. Edward Gifford (Catherine Elizabe...</td>\n      <td>1</td>\n      <td>64.00</td>\n      <td>1</td>\n      <td>1</td>\n      <td>112901</td>\n      <td>26.5500</td>\n      <td>B26</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":62},{"cell_type":"code","source":"# train3 = train.copy()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:52.734009Z","iopub.execute_input":"2025-10-08T17:23:52.734287Z","iopub.status.idle":"2025-10-08T17:23:52.738407Z","shell.execute_reply.started":"2025-10-08T17:23:52.734267Z","shell.execute_reply":"2025-10-08T17:23:52.737388Z"}},"outputs":[],"execution_count":63},{"cell_type":"code","source":"# # train.loc[linhas_remover]\n# print(train3.shape)\n# # train3 = train3.drop(linhas_remover).copy()\n# train3 = train3.drop(linhas_remover, axis=0).reset_index(drop=True)\n\n# print(train3.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:53.813219Z","iopub.execute_input":"2025-10-08T17:23:53.813490Z","iopub.status.idle":"2025-10-08T17:23:53.817842Z","shell.execute_reply.started":"2025-10-08T17:23:53.813470Z","shell.execute_reply":"2025-10-08T17:23:53.816582Z"}},"outputs":[],"execution_count":64},{"cell_type":"code","source":"# train3[\"Age\"].hist(bins=50, figsize=(15,6), alpha=0.7, edgecolor=\"black\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:54.661923Z","iopub.execute_input":"2025-10-08T17:23:54.662221Z","iopub.status.idle":"2025-10-08T17:23:54.665988Z","shell.execute_reply.started":"2025-10-08T17:23:54.662201Z","shell.execute_reply":"2025-10-08T17:23:54.664870Z"}},"outputs":[],"execution_count":65},{"cell_type":"code","source":"# train3[\"Fare\"].hist(bins=50, figsize=(15,6), alpha=1, edgecolor=\"black\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:56.926514Z","iopub.execute_input":"2025-10-08T17:23:56.926881Z","iopub.status.idle":"2025-10-08T17:23:56.930977Z","shell.execute_reply.started":"2025-10-08T17:23:56.926855Z","shell.execute_reply":"2025-10-08T17:23:56.929888Z"}},"outputs":[],"execution_count":66},{"cell_type":"code","source":"# # train[\"Age\"] = train3[\"Age\"].copy()\n# # train[\"Fare\"] = train3[\"Fare\"].copy()\n# train = train3.copy()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:58.096088Z","iopub.execute_input":"2025-10-08T17:23:58.096364Z","iopub.status.idle":"2025-10-08T17:23:58.100161Z","shell.execute_reply.started":"2025-10-08T17:23:58.096342Z","shell.execute_reply":"2025-10-08T17:23:58.099147Z"}},"outputs":[],"execution_count":67},{"cell_type":"code","source":"# train.loc[linhas_remover]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:23:59.315977Z","iopub.execute_input":"2025-10-08T17:23:59.316309Z","iopub.status.idle":"2025-10-08T17:23:59.320882Z","shell.execute_reply.started":"2025-10-08T17:23:59.316284Z","shell.execute_reply":"2025-10-08T17:23:59.319680Z"}},"outputs":[],"execution_count":68},{"cell_type":"code","source":"# # train.head(10)\n# train[train[\"Age\"] == 0.92]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:00.227632Z","iopub.execute_input":"2025-10-08T17:24:00.227961Z","iopub.status.idle":"2025-10-08T17:24:00.232339Z","shell.execute_reply.started":"2025-10-08T17:24:00.227939Z","shell.execute_reply":"2025-10-08T17:24:00.230971Z"}},"outputs":[],"execution_count":69},{"cell_type":"code","source":"# train.head(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:01.679937Z","iopub.execute_input":"2025-10-08T17:24:01.680212Z","iopub.status.idle":"2025-10-08T17:24:01.684513Z","shell.execute_reply.started":"2025-10-08T17:24:01.680193Z","shell.execute_reply":"2025-10-08T17:24:01.683140Z"}},"outputs":[],"execution_count":70},{"cell_type":"code","source":"# train.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:03.926078Z","iopub.execute_input":"2025-10-08T17:24:03.926358Z","iopub.status.idle":"2025-10-08T17:24:03.930219Z","shell.execute_reply.started":"2025-10-08T17:24:03.926337Z","shell.execute_reply":"2025-10-08T17:24:03.929108Z"}},"outputs":[],"execution_count":71},{"cell_type":"code","source":"# train3 = train.copy()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:05.188888Z","iopub.execute_input":"2025-10-08T17:24:05.189238Z","iopub.status.idle":"2025-10-08T17:24:05.193280Z","shell.execute_reply.started":"2025-10-08T17:24:05.189214Z","shell.execute_reply":"2025-10-08T17:24:05.192162Z"}},"outputs":[],"execution_count":72},{"cell_type":"code","source":"train3 = dataset.copy()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:12.520744Z","iopub.execute_input":"2025-10-08T17:24:12.521058Z","iopub.status.idle":"2025-10-08T17:24:12.526390Z","shell.execute_reply.started":"2025-10-08T17:24:12.521038Z","shell.execute_reply":"2025-10-08T17:24:12.525543Z"}},"outputs":[],"execution_count":73},{"cell_type":"code","source":"# resultado = train[\"Fare\"].map(lambda i: np.log(i) if i > 0 else 0)\n# resultado","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:14.442212Z","iopub.execute_input":"2025-10-08T17:24:14.442505Z","iopub.status.idle":"2025-10-08T17:24:14.445960Z","shell.execute_reply.started":"2025-10-08T17:24:14.442481Z","shell.execute_reply":"2025-10-08T17:24:14.444965Z"}},"outputs":[],"execution_count":74},{"cell_type":"code","source":"resultado = dataset[\"Fare\"].map(lambda i: np.log(i) if i > 0 else 0)\nresultado","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:14.993192Z","iopub.execute_input":"2025-10-08T17:24:14.993467Z","iopub.status.idle":"2025-10-08T17:24:15.004150Z","shell.execute_reply.started":"2025-10-08T17:24:14.993447Z","shell.execute_reply":"2025-10-08T17:24:15.002704Z"}},"outputs":[{"execution_count":75,"output_type":"execute_result","data":{"text/plain":"0      1.981001\n1      4.266662\n2      2.070022\n3      3.972177\n4      2.085672\n         ...   \n413    2.085672\n414    4.690430\n415    1.981001\n416    2.085672\n417    3.107198\nName: Fare, Length: 1309, dtype: float64"},"metadata":{}}],"execution_count":75},{"cell_type":"code","source":"# train3[\"Fare\"] = resultado","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:16.868615Z","iopub.execute_input":"2025-10-08T17:24:16.868965Z","iopub.status.idle":"2025-10-08T17:24:16.873037Z","shell.execute_reply.started":"2025-10-08T17:24:16.868940Z","shell.execute_reply":"2025-10-08T17:24:16.871805Z"}},"outputs":[],"execution_count":76},{"cell_type":"code","source":"# train3[\"Fare\"].head(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:17.978086Z","iopub.execute_input":"2025-10-08T17:24:17.978364Z","iopub.status.idle":"2025-10-08T17:24:17.982722Z","shell.execute_reply.started":"2025-10-08T17:24:17.978344Z","shell.execute_reply":"2025-10-08T17:24:17.981106Z"}},"outputs":[],"execution_count":77},{"cell_type":"code","source":"# train[\"Fare\"].hist(figsize=(15,6), edgecolor=\"black\", bins=50)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:18.177945Z","iopub.execute_input":"2025-10-08T17:24:18.178238Z","iopub.status.idle":"2025-10-08T17:24:18.182244Z","shell.execute_reply.started":"2025-10-08T17:24:18.178219Z","shell.execute_reply":"2025-10-08T17:24:18.181207Z"}},"outputs":[],"execution_count":78},{"cell_type":"code","source":"# train3[\"Fare\"].hist(figsize=(15,6), edgecolor=\"black\", bins=50)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:18.597524Z","iopub.execute_input":"2025-10-08T17:24:18.597889Z","iopub.status.idle":"2025-10-08T17:24:18.601731Z","shell.execute_reply.started":"2025-10-08T17:24:18.597861Z","shell.execute_reply":"2025-10-08T17:24:18.600649Z"}},"outputs":[],"execution_count":79},{"cell_type":"code","source":"# train[\"Age\"].hist(figsize=(15,6), edgecolor=\"black\", bins=50)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:18.749981Z","iopub.execute_input":"2025-10-08T17:24:18.750293Z","iopub.status.idle":"2025-10-08T17:24:18.753918Z","shell.execute_reply.started":"2025-10-08T17:24:18.750269Z","shell.execute_reply":"2025-10-08T17:24:18.752966Z"}},"outputs":[],"execution_count":80},{"cell_type":"code","source":"# train.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:18.961713Z","iopub.execute_input":"2025-10-08T17:24:18.961997Z","iopub.status.idle":"2025-10-08T17:24:18.965695Z","shell.execute_reply.started":"2025-10-08T17:24:18.961976Z","shell.execute_reply":"2025-10-08T17:24:18.964667Z"}},"outputs":[],"execution_count":81},{"cell_type":"code","source":"# train2.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:19.225157Z","iopub.execute_input":"2025-10-08T17:24:19.225469Z","iopub.status.idle":"2025-10-08T17:24:19.228923Z","shell.execute_reply.started":"2025-10-08T17:24:19.225447Z","shell.execute_reply":"2025-10-08T17:24:19.227894Z"}},"outputs":[],"execution_count":82},{"cell_type":"code","source":"# name = [i.split(\",\")[1].split(\".\")[0].strip() for i in train[\"Name\"]]\n\n# # dataset_title = [i.split(\",\")[1].split(\".\")[0].strip() for i in dataset[\"Name\"]]\n# # dataset[\"Title\"] = pd.Series(dataset_title)\n# # dataset[\"Title\"].head()\n\n# name_series = pd.Series(name)\n# train2 = train.copy()\n# # train2['Title'] = name_series","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:20.808615Z","iopub.execute_input":"2025-10-08T17:24:20.808951Z","iopub.status.idle":"2025-10-08T17:24:20.812839Z","shell.execute_reply.started":"2025-10-08T17:24:20.808922Z","shell.execute_reply":"2025-10-08T17:24:20.811844Z"}},"outputs":[],"execution_count":83},{"cell_type":"code","source":"name = [i.split(\",\")[1].split(\".\")[0].strip() for i in dataset[\"Name\"]]\n\n# dataset_title = [i.split(\",\")[1].split(\".\")[0].strip() for i in dataset[\"Name\"]]\n# dataset[\"Title\"] = pd.Series(dataset_title)\n# dataset[\"Title\"].head()\n\nname_series = pd.Series(name)\ntrain2 = dataset.copy()\n# train2['Title'] = name_series","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:21.056514Z","iopub.execute_input":"2025-10-08T17:24:21.056872Z","iopub.status.idle":"2025-10-08T17:24:21.063855Z","shell.execute_reply.started":"2025-10-08T17:24:21.056849Z","shell.execute_reply":"2025-10-08T17:24:21.062733Z"}},"outputs":[],"execution_count":84},{"cell_type":"code","source":"train2[\"Title\"] = name_series\ntrain2.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:21.972132Z","iopub.execute_input":"2025-10-08T17:24:21.972419Z","iopub.status.idle":"2025-10-08T17:24:21.987881Z","shell.execute_reply.started":"2025-10-08T17:24:21.972398Z","shell.execute_reply":"2025-10-08T17:24:21.986879Z"}},"outputs":[{"execution_count":85,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1       0.0       3   \n1            2       1.0       1   \n2            3       1.0       3   \n3            4       1.0       1   \n4            5       0.0       3   \n\n                                                Name  Sex   Age  SibSp  Parch  \\\n0                            Braund, Mr. Owen Harris    0  22.0      1      0   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...    1  38.0      1      0   \n2                             Heikkinen, Miss. Laina    1  26.0      0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)    1  35.0      1      0   \n4                           Allen, Mr. William Henry    0  35.0      0      0   \n\n             Ticket     Fare Cabin  Embarked Title  \n0         A/5 21171   7.2500   NaN         2    Mr  \n1          PC 17599  71.2833   C85         0   Mrs  \n2  STON/O2. 3101282   7.9250   NaN         2  Miss  \n3            113803  53.1000  C123         2   Mrs  \n4            373450   8.0500   NaN         2    Mr  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n      <th>Title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>0</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>Mr</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>1</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>0</td>\n      <td>Mrs</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1.0</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>1</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>Miss</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>2</td>\n      <td>Mrs</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>0</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>Mr</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":85},{"cell_type":"code","source":"# # len(name_series)\n# name_series.isnull().sum()\n# print(name_series.unique())\n# print(name_series.shape, train2.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:22.644709Z","iopub.execute_input":"2025-10-08T17:24:22.645025Z","iopub.status.idle":"2025-10-08T17:24:22.649003Z","shell.execute_reply.started":"2025-10-08T17:24:22.645001Z","shell.execute_reply":"2025-10-08T17:24:22.647950Z"}},"outputs":[],"execution_count":86},{"cell_type":"code","source":"# train2.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:24.515470Z","iopub.execute_input":"2025-10-08T17:24:24.515872Z","iopub.status.idle":"2025-10-08T17:24:24.519869Z","shell.execute_reply.started":"2025-10-08T17:24:24.515844Z","shell.execute_reply":"2025-10-08T17:24:24.518709Z"}},"outputs":[],"execution_count":87},{"cell_type":"code","source":"train2[\"Title\"].unique()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:24.946279Z","iopub.execute_input":"2025-10-08T17:24:24.946561Z","iopub.status.idle":"2025-10-08T17:24:24.955856Z","shell.execute_reply.started":"2025-10-08T17:24:24.946541Z","shell.execute_reply":"2025-10-08T17:24:24.954697Z"}},"outputs":[{"execution_count":88,"output_type":"execute_result","data":{"text/plain":"array(['Mr', 'Mrs', 'Miss', 'Master', 'Don', 'Rev', 'Dr', 'Mme', 'Ms',\n       'Major', 'Lady', 'Sir', 'Mlle', 'Col', 'Capt', 'the Countess',\n       'Jonkheer'], dtype=object)"},"metadata":{}}],"execution_count":88},{"cell_type":"code","source":"dict_names = {\n    'Mr':0,  #male adult\n    'Mrs':1, #female adult and children\n    'Miss':1,\n    'Mlle':1,\n    'Mme':1,\n    'Ms':1,  \n    'Master':2, #male children\n    'Major':3,  #Military\n    'Col':3,\n    'Rev':3,\n    'Dr':3,\n    'Capt':3, \n    'Don':4, #Nobelty\n    'Lady':4,\n    'Sir':4,\n    'the Countess':4,\n    'Jonkheer':4\n}\ndict_names","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:25.469244Z","iopub.execute_input":"2025-10-08T17:24:25.469535Z","iopub.status.idle":"2025-10-08T17:24:25.476783Z","shell.execute_reply.started":"2025-10-08T17:24:25.469514Z","shell.execute_reply":"2025-10-08T17:24:25.475688Z"}},"outputs":[{"execution_count":89,"output_type":"execute_result","data":{"text/plain":"{'Mr': 0,\n 'Mrs': 1,\n 'Miss': 1,\n 'Mlle': 1,\n 'Mme': 1,\n 'Ms': 1,\n 'Master': 2,\n 'Major': 3,\n 'Col': 3,\n 'Rev': 3,\n 'Dr': 3,\n 'Capt': 3,\n 'Don': 4,\n 'Lady': 4,\n 'Sir': 4,\n 'the Countess': 4,\n 'Jonkheer': 4}"},"metadata":{}}],"execution_count":89},{"cell_type":"code","source":"train2[\"Title\"] = train2[\"Title\"].map(dict_names)\ntrain2.head(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:26.321054Z","iopub.execute_input":"2025-10-08T17:24:26.321353Z","iopub.status.idle":"2025-10-08T17:24:26.337120Z","shell.execute_reply.started":"2025-10-08T17:24:26.321330Z","shell.execute_reply":"2025-10-08T17:24:26.335950Z"}},"outputs":[{"execution_count":90,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1       0.0       3   \n1            2       1.0       1   \n2            3       1.0       3   \n3            4       1.0       1   \n4            5       0.0       3   \n5            6       0.0       3   \n6            7       0.0       1   \n7            8       0.0       3   \n8            9       1.0       3   \n9           10       1.0       2   \n\n                                                Name  Sex   Age  SibSp  Parch  \\\n0                            Braund, Mr. Owen Harris    0  22.0      1      0   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...    1  38.0      1      0   \n2                             Heikkinen, Miss. Laina    1  26.0      0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)    1  35.0      1      0   \n4                           Allen, Mr. William Henry    0  35.0      0      0   \n5                                   Moran, Mr. James    0  28.0      0      0   \n6                            McCarthy, Mr. Timothy J    0  54.0      0      0   \n7                     Palsson, Master. Gosta Leonard    0   2.0      3      1   \n8  Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)    1  27.0      0      2   \n9                Nasser, Mrs. Nicholas (Adele Achem)    1  14.0      1      0   \n\n             Ticket     Fare Cabin  Embarked  Title  \n0         A/5 21171   7.2500   NaN         2      0  \n1          PC 17599  71.2833   C85         0      1  \n2  STON/O2. 3101282   7.9250   NaN         2      1  \n3            113803  53.1000  C123         2      1  \n4            373450   8.0500   NaN         2      0  \n5            330877   8.4583   NaN         1      0  \n6             17463  51.8625   E46         2      0  \n7            349909  21.0750   NaN         2      2  \n8            347742  11.1333   NaN         2      1  \n9            237736  30.0708   NaN         0      1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n      <th>Title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>0</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>1</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1.0</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>1</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>0</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Moran, Mr. James</td>\n      <td>0</td>\n      <td>28.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330877</td>\n      <td>8.4583</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>McCarthy, Mr. Timothy J</td>\n      <td>0</td>\n      <td>54.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>17463</td>\n      <td>51.8625</td>\n      <td>E46</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Palsson, Master. Gosta Leonard</td>\n      <td>0</td>\n      <td>2.0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>349909</td>\n      <td>21.0750</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>9</td>\n      <td>1.0</td>\n      <td>3</td>\n      <td>Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)</td>\n      <td>1</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>347742</td>\n      <td>11.1333</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10</td>\n      <td>1.0</td>\n      <td>2</td>\n      <td>Nasser, Mrs. Nicholas (Adele Achem)</td>\n      <td>1</td>\n      <td>14.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>237736</td>\n      <td>30.0708</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":90},{"cell_type":"code","source":"# train = train2.copy()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:28.115662Z","iopub.execute_input":"2025-10-08T17:24:28.115961Z","iopub.status.idle":"2025-10-08T17:24:28.119892Z","shell.execute_reply.started":"2025-10-08T17:24:28.115940Z","shell.execute_reply":"2025-10-08T17:24:28.118783Z"}},"outputs":[],"execution_count":91},{"cell_type":"code","source":"dataset = train2.copy()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:28.893181Z","iopub.execute_input":"2025-10-08T17:24:28.893492Z","iopub.status.idle":"2025-10-08T17:24:28.898180Z","shell.execute_reply.started":"2025-10-08T17:24:28.893466Z","shell.execute_reply":"2025-10-08T17:24:28.897262Z"}},"outputs":[],"execution_count":92},{"cell_type":"code","source":"# taxas = train.groupby(\"Title\").agg({\"Survived\": [\"count\", \"mean\", \"sum\"]})\n# # taxas.columns = ['A', 'B', 'C']\n# taxas","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:29.840855Z","iopub.execute_input":"2025-10-08T17:24:29.841142Z","iopub.status.idle":"2025-10-08T17:24:29.845010Z","shell.execute_reply.started":"2025-10-08T17:24:29.841121Z","shell.execute_reply":"2025-10-08T17:24:29.843869Z"}},"outputs":[],"execution_count":93},{"cell_type":"code","source":"# train[\"Cabin\"].unique()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:30.091942Z","iopub.execute_input":"2025-10-08T17:24:30.092253Z","iopub.status.idle":"2025-10-08T17:24:30.096300Z","shell.execute_reply.started":"2025-10-08T17:24:30.092229Z","shell.execute_reply":"2025-10-08T17:24:30.095031Z"}},"outputs":[],"execution_count":94},{"cell_type":"code","source":"# train[\"Cabin\"].str[0].unique()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:30.323443Z","iopub.execute_input":"2025-10-08T17:24:30.323783Z","iopub.status.idle":"2025-10-08T17:24:30.328143Z","shell.execute_reply.started":"2025-10-08T17:24:30.323755Z","shell.execute_reply":"2025-10-08T17:24:30.326918Z"}},"outputs":[],"execution_count":95},{"cell_type":"code","source":"dict_cabin = {\n    np.nan:0,\n    'C':1, \n    'E':2,\n    'G':3,\n    'D':4,\n    'A':5,\n    'B':6,\n    'F':7,\n    'T':8\n}\ndict_cabin","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:30.947618Z","iopub.execute_input":"2025-10-08T17:24:30.947925Z","iopub.status.idle":"2025-10-08T17:24:30.954551Z","shell.execute_reply.started":"2025-10-08T17:24:30.947901Z","shell.execute_reply":"2025-10-08T17:24:30.953402Z"}},"outputs":[{"execution_count":96,"output_type":"execute_result","data":{"text/plain":"{nan: 0, 'C': 1, 'E': 2, 'G': 3, 'D': 4, 'A': 5, 'B': 6, 'F': 7, 'T': 8}"},"metadata":{}}],"execution_count":96},{"cell_type":"code","source":"# train2 = train.copy()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:32.406344Z","iopub.execute_input":"2025-10-08T17:24:32.406723Z","iopub.status.idle":"2025-10-08T17:24:32.410535Z","shell.execute_reply.started":"2025-10-08T17:24:32.406689Z","shell.execute_reply":"2025-10-08T17:24:32.409316Z"}},"outputs":[],"execution_count":97},{"cell_type":"code","source":"train2 = dataset.copy()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:32.625592Z","iopub.execute_input":"2025-10-08T17:24:32.625897Z","iopub.status.idle":"2025-10-08T17:24:32.630455Z","shell.execute_reply.started":"2025-10-08T17:24:32.625876Z","shell.execute_reply":"2025-10-08T17:24:32.629302Z"}},"outputs":[],"execution_count":98},{"cell_type":"code","source":"cabin_fl = train2[\"Cabin\"].str[0]\ntrain2[\"Cabin_gen\"] = pd.Series(cabin_fl)\ntrain2.head(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:32.819720Z","iopub.execute_input":"2025-10-08T17:24:32.820044Z","iopub.status.idle":"2025-10-08T17:24:32.836362Z","shell.execute_reply.started":"2025-10-08T17:24:32.820020Z","shell.execute_reply":"2025-10-08T17:24:32.835373Z"}},"outputs":[{"execution_count":99,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1       0.0       3   \n1            2       1.0       1   \n2            3       1.0       3   \n3            4       1.0       1   \n4            5       0.0       3   \n5            6       0.0       3   \n6            7       0.0       1   \n7            8       0.0       3   \n8            9       1.0       3   \n9           10       1.0       2   \n\n                                                Name  Sex   Age  SibSp  Parch  \\\n0                            Braund, Mr. Owen Harris    0  22.0      1      0   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...    1  38.0      1      0   \n2                             Heikkinen, Miss. Laina    1  26.0      0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)    1  35.0      1      0   \n4                           Allen, Mr. William Henry    0  35.0      0      0   \n5                                   Moran, Mr. James    0  28.0      0      0   \n6                            McCarthy, Mr. Timothy J    0  54.0      0      0   \n7                     Palsson, Master. Gosta Leonard    0   2.0      3      1   \n8  Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)    1  27.0      0      2   \n9                Nasser, Mrs. Nicholas (Adele Achem)    1  14.0      1      0   \n\n             Ticket     Fare Cabin  Embarked  Title Cabin_gen  \n0         A/5 21171   7.2500   NaN         2      0       NaN  \n1          PC 17599  71.2833   C85         0      1         C  \n2  STON/O2. 3101282   7.9250   NaN         2      1       NaN  \n3            113803  53.1000  C123         2      1         C  \n4            373450   8.0500   NaN         2      0       NaN  \n5            330877   8.4583   NaN         1      0       NaN  \n6             17463  51.8625   E46         2      0         E  \n7            349909  21.0750   NaN         2      2       NaN  \n8            347742  11.1333   NaN         2      1       NaN  \n9            237736  30.0708   NaN         0      1       NaN  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n      <th>Title</th>\n      <th>Cabin_gen</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>0</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>1</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>0</td>\n      <td>1</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1.0</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>1</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>1</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>2</td>\n      <td>1</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>0</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Moran, Mr. James</td>\n      <td>0</td>\n      <td>28.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330877</td>\n      <td>8.4583</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>McCarthy, Mr. Timothy J</td>\n      <td>0</td>\n      <td>54.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>17463</td>\n      <td>51.8625</td>\n      <td>E46</td>\n      <td>2</td>\n      <td>0</td>\n      <td>E</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Palsson, Master. Gosta Leonard</td>\n      <td>0</td>\n      <td>2.0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>349909</td>\n      <td>21.0750</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>2</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>9</td>\n      <td>1.0</td>\n      <td>3</td>\n      <td>Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)</td>\n      <td>1</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>347742</td>\n      <td>11.1333</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>1</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10</td>\n      <td>1.0</td>\n      <td>2</td>\n      <td>Nasser, Mrs. Nicholas (Adele Achem)</td>\n      <td>1</td>\n      <td>14.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>237736</td>\n      <td>30.0708</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>1</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":99},{"cell_type":"code","source":"train2[\"Cabin_gen\"] = train2[\"Cabin_gen\"].map(dict_cabin)\ntrain2.head(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:33.033272Z","iopub.execute_input":"2025-10-08T17:24:33.033560Z","iopub.status.idle":"2025-10-08T17:24:33.051263Z","shell.execute_reply.started":"2025-10-08T17:24:33.033536Z","shell.execute_reply":"2025-10-08T17:24:33.050050Z"}},"outputs":[{"execution_count":100,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1       0.0       3   \n1            2       1.0       1   \n2            3       1.0       3   \n3            4       1.0       1   \n4            5       0.0       3   \n5            6       0.0       3   \n6            7       0.0       1   \n7            8       0.0       3   \n8            9       1.0       3   \n9           10       1.0       2   \n\n                                                Name  Sex   Age  SibSp  Parch  \\\n0                            Braund, Mr. Owen Harris    0  22.0      1      0   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...    1  38.0      1      0   \n2                             Heikkinen, Miss. Laina    1  26.0      0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)    1  35.0      1      0   \n4                           Allen, Mr. William Henry    0  35.0      0      0   \n5                                   Moran, Mr. James    0  28.0      0      0   \n6                            McCarthy, Mr. Timothy J    0  54.0      0      0   \n7                     Palsson, Master. Gosta Leonard    0   2.0      3      1   \n8  Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)    1  27.0      0      2   \n9                Nasser, Mrs. Nicholas (Adele Achem)    1  14.0      1      0   \n\n             Ticket     Fare Cabin  Embarked  Title  Cabin_gen  \n0         A/5 21171   7.2500   NaN         2      0          0  \n1          PC 17599  71.2833   C85         0      1          1  \n2  STON/O2. 3101282   7.9250   NaN         2      1          0  \n3            113803  53.1000  C123         2      1          1  \n4            373450   8.0500   NaN         2      0          0  \n5            330877   8.4583   NaN         1      0          0  \n6             17463  51.8625   E46         2      0          2  \n7            349909  21.0750   NaN         2      2          0  \n8            347742  11.1333   NaN         2      1          0  \n9            237736  30.0708   NaN         0      1          0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n      <th>Title</th>\n      <th>Cabin_gen</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>0</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>1</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1.0</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>1</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>0</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Moran, Mr. James</td>\n      <td>0</td>\n      <td>28.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330877</td>\n      <td>8.4583</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>McCarthy, Mr. Timothy J</td>\n      <td>0</td>\n      <td>54.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>17463</td>\n      <td>51.8625</td>\n      <td>E46</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Palsson, Master. Gosta Leonard</td>\n      <td>0</td>\n      <td>2.0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>349909</td>\n      <td>21.0750</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>9</td>\n      <td>1.0</td>\n      <td>3</td>\n      <td>Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)</td>\n      <td>1</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>347742</td>\n      <td>11.1333</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10</td>\n      <td>1.0</td>\n      <td>2</td>\n      <td>Nasser, Mrs. Nicholas (Adele Achem)</td>\n      <td>1</td>\n      <td>14.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>237736</td>\n      <td>30.0708</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":100},{"cell_type":"code","source":"# train = train2.copy()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:33.730292Z","iopub.execute_input":"2025-10-08T17:24:33.730634Z","iopub.status.idle":"2025-10-08T17:24:33.734780Z","shell.execute_reply.started":"2025-10-08T17:24:33.730608Z","shell.execute_reply":"2025-10-08T17:24:33.733645Z"}},"outputs":[],"execution_count":101},{"cell_type":"code","source":"train3 = dataset.copy()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:24:35.551793Z","iopub.execute_input":"2025-10-08T17:24:35.552101Z","iopub.status.idle":"2025-10-08T17:24:35.557347Z","shell.execute_reply.started":"2025-10-08T17:24:35.552077Z","shell.execute_reply":"2025-10-08T17:24:35.555832Z"}},"outputs":[],"execution_count":102},{"cell_type":"code","source":"dataset = train2.copy()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:57:25.136381Z","iopub.execute_input":"2025-10-08T17:57:25.136744Z","iopub.status.idle":"2025-10-08T17:57:25.142251Z","shell.execute_reply.started":"2025-10-08T17:57:25.136715Z","shell.execute_reply":"2025-10-08T17:57:25.140995Z"}},"outputs":[],"execution_count":129},{"cell_type":"code","source":"train2[:train_len]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:57:47.408656Z","iopub.execute_input":"2025-10-08T17:57:47.408963Z","iopub.status.idle":"2025-10-08T17:57:47.425495Z","shell.execute_reply.started":"2025-10-08T17:57:47.408942Z","shell.execute_reply":"2025-10-08T17:57:47.423969Z"}},"outputs":[{"execution_count":131,"output_type":"execute_result","data":{"text/plain":"     PassengerId  Survived  Pclass  \\\n0              1       0.0       3   \n1              2       1.0       1   \n2              3       1.0       3   \n3              4       1.0       1   \n4              5       0.0       3   \n..           ...       ...     ...   \n886          887       0.0       2   \n887          888       1.0       1   \n888          889       0.0       3   \n889          890       1.0       1   \n890          891       0.0       3   \n\n                                                  Name  Sex   Age  SibSp  \\\n0                              Braund, Mr. Owen Harris    0  22.0      1   \n1    Cumings, Mrs. John Bradley (Florence Briggs Th...    1  38.0      1   \n2                               Heikkinen, Miss. Laina    1  26.0      0   \n3         Futrelle, Mrs. Jacques Heath (Lily May Peel)    1  35.0      1   \n4                             Allen, Mr. William Henry    0  35.0      0   \n..                                                 ...  ...   ...    ...   \n886                              Montvila, Rev. Juozas    0  27.0      0   \n887                       Graham, Miss. Margaret Edith    1  19.0      0   \n888           Johnston, Miss. Catherine Helen \"Carrie\"    1  28.0      1   \n889                              Behr, Mr. Karl Howell    0  26.0      0   \n890                                Dooley, Mr. Patrick    0  32.0      0   \n\n     Parch            Ticket     Fare Cabin  Embarked  Title  Cabin_gen  \n0        0         A/5 21171   7.2500   NaN         2      0          0  \n1        0          PC 17599  71.2833   C85         0      1          1  \n2        0  STON/O2. 3101282   7.9250   NaN         2      1          0  \n3        0            113803  53.1000  C123         2      1          1  \n4        0            373450   8.0500   NaN         2      0          0  \n..     ...               ...      ...   ...       ...    ...        ...  \n886      0            211536  13.0000   NaN         2      3          0  \n887      0            112053  30.0000   B42         2      1          6  \n888      2        W./C. 6607  23.4500   NaN         2      1          0  \n889      0            111369  30.0000  C148         0      0          1  \n890      0            370376   7.7500   NaN         1      0          0  \n\n[891 rows x 14 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n      <th>Title</th>\n      <th>Cabin_gen</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>0</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>1</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1.0</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>1</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>0</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>886</th>\n      <td>887</td>\n      <td>0.0</td>\n      <td>2</td>\n      <td>Montvila, Rev. Juozas</td>\n      <td>0</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>211536</td>\n      <td>13.0000</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>887</th>\n      <td>888</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Graham, Miss. Margaret Edith</td>\n      <td>1</td>\n      <td>19.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>112053</td>\n      <td>30.0000</td>\n      <td>B42</td>\n      <td>2</td>\n      <td>1</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>888</th>\n      <td>889</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n      <td>1</td>\n      <td>28.0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>W./C. 6607</td>\n      <td>23.4500</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>889</th>\n      <td>890</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Behr, Mr. Karl Howell</td>\n      <td>0</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>111369</td>\n      <td>30.0000</td>\n      <td>C148</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>890</th>\n      <td>891</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Dooley, Mr. Patrick</td>\n      <td>0</td>\n      <td>32.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>370376</td>\n      <td>7.7500</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>891 rows × 14 columns</p>\n</div>"},"metadata":{}}],"execution_count":131},{"cell_type":"code","source":"# dataset[:train_len]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:58:23.701201Z","iopub.execute_input":"2025-10-08T17:58:23.701507Z","iopub.status.idle":"2025-10-08T17:58:23.720931Z","shell.execute_reply.started":"2025-10-08T17:58:23.701484Z","shell.execute_reply":"2025-10-08T17:58:23.719657Z"}},"outputs":[{"execution_count":134,"output_type":"execute_result","data":{"text/plain":"     PassengerId  Survived  Pclass  \\\n0              1       0.0       3   \n1              2       1.0       1   \n2              3       1.0       3   \n3              4       1.0       1   \n4              5       0.0       3   \n..           ...       ...     ...   \n886          887       0.0       2   \n887          888       1.0       1   \n888          889       0.0       3   \n889          890       1.0       1   \n890          891       0.0       3   \n\n                                                  Name  Sex   Age  SibSp  \\\n0                              Braund, Mr. Owen Harris    0  22.0      1   \n1    Cumings, Mrs. John Bradley (Florence Briggs Th...    1  38.0      1   \n2                               Heikkinen, Miss. Laina    1  26.0      0   \n3         Futrelle, Mrs. Jacques Heath (Lily May Peel)    1  35.0      1   \n4                             Allen, Mr. William Henry    0  35.0      0   \n..                                                 ...  ...   ...    ...   \n886                              Montvila, Rev. Juozas    0  27.0      0   \n887                       Graham, Miss. Margaret Edith    1  19.0      0   \n888           Johnston, Miss. Catherine Helen \"Carrie\"    1  28.0      1   \n889                              Behr, Mr. Karl Howell    0  26.0      0   \n890                                Dooley, Mr. Patrick    0  32.0      0   \n\n     Parch            Ticket     Fare Cabin  Embarked  Title  Cabin_gen  \n0        0         A/5 21171   7.2500   NaN         2      0          0  \n1        0          PC 17599  71.2833   C85         0      1          1  \n2        0  STON/O2. 3101282   7.9250   NaN         2      1          0  \n3        0            113803  53.1000  C123         2      1          1  \n4        0            373450   8.0500   NaN         2      0          0  \n..     ...               ...      ...   ...       ...    ...        ...  \n886      0            211536  13.0000   NaN         2      3          0  \n887      0            112053  30.0000   B42         2      1          6  \n888      2        W./C. 6607  23.4500   NaN         2      1          0  \n889      0            111369  30.0000  C148         0      0          1  \n890      0            370376   7.7500   NaN         1      0          0  \n\n[891 rows x 14 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n      <th>Title</th>\n      <th>Cabin_gen</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>0</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>1</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1.0</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>1</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>0</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>886</th>\n      <td>887</td>\n      <td>0.0</td>\n      <td>2</td>\n      <td>Montvila, Rev. Juozas</td>\n      <td>0</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>211536</td>\n      <td>13.0000</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>887</th>\n      <td>888</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Graham, Miss. Margaret Edith</td>\n      <td>1</td>\n      <td>19.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>112053</td>\n      <td>30.0000</td>\n      <td>B42</td>\n      <td>2</td>\n      <td>1</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>888</th>\n      <td>889</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n      <td>1</td>\n      <td>28.0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>W./C. 6607</td>\n      <td>23.4500</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>889</th>\n      <td>890</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Behr, Mr. Karl Howell</td>\n      <td>0</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>111369</td>\n      <td>30.0000</td>\n      <td>C148</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>890</th>\n      <td>891</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Dooley, Mr. Patrick</td>\n      <td>0</td>\n      <td>32.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>370376</td>\n      <td>7.7500</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>891 rows × 14 columns</p>\n</div>"},"metadata":{}}],"execution_count":134},{"cell_type":"code","source":"dataset.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:58:40.659036Z","iopub.execute_input":"2025-10-08T17:58:40.659345Z","iopub.status.idle":"2025-10-08T17:58:40.664988Z","shell.execute_reply.started":"2025-10-08T17:58:40.659320Z","shell.execute_reply":"2025-10-08T17:58:40.663936Z"}},"outputs":[{"execution_count":135,"output_type":"execute_result","data":{"text/plain":"(1309, 14)"},"metadata":{}}],"execution_count":135},{"cell_type":"code","source":"if dataset.columns.isin([\"PassengerId\", \"Name\", \"Cabin\", \"Ticket\"]).any():\n    dataset = dataset.drop(columns=[\"PassengerId\", \"Name\", \"Cabin\", \"Ticket\"], axis=1)\n# dataset.dtypes\ndataset.head(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:58:49.363174Z","iopub.execute_input":"2025-10-08T17:58:49.363461Z","iopub.status.idle":"2025-10-08T17:58:49.380003Z","shell.execute_reply.started":"2025-10-08T17:58:49.363441Z","shell.execute_reply":"2025-10-08T17:58:49.378876Z"}},"outputs":[{"execution_count":136,"output_type":"execute_result","data":{"text/plain":"   Survived  Pclass  Sex   Age  SibSp  Parch     Fare  Embarked  Title  \\\n0       0.0       3    0  22.0      1      0   7.2500         2      0   \n1       1.0       1    1  38.0      1      0  71.2833         0      1   \n2       1.0       3    1  26.0      0      0   7.9250         2      1   \n3       1.0       1    1  35.0      1      0  53.1000         2      1   \n4       0.0       3    0  35.0      0      0   8.0500         2      0   \n5       0.0       3    0  28.0      0      0   8.4583         1      0   \n6       0.0       1    0  54.0      0      0  51.8625         2      0   \n7       0.0       3    0   2.0      3      1  21.0750         2      2   \n8       1.0       3    1  27.0      0      2  11.1333         2      1   \n9       1.0       2    1  14.0      1      0  30.0708         0      1   \n\n   Cabin_gen  \n0          0  \n1          1  \n2          0  \n3          1  \n4          0  \n5          0  \n6          2  \n7          0  \n8          0  \n9          0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Title</th>\n      <th>Cabin_gen</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1.0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0.0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>28.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.4583</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>0.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>54.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>51.8625</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0.0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2.0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>21.0750</td>\n      <td>2</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>1.0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>11.1333</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>1.0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>14.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>30.0708</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":136},{"cell_type":"code","source":"train = dataset[:train_len].copy()\ntrain.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:59:04.752331Z","iopub.execute_input":"2025-10-08T17:59:04.753019Z","iopub.status.idle":"2025-10-08T17:59:04.759630Z","shell.execute_reply.started":"2025-10-08T17:59:04.752981Z","shell.execute_reply":"2025-10-08T17:59:04.758409Z"}},"outputs":[{"execution_count":137,"output_type":"execute_result","data":{"text/plain":"(891, 10)"},"metadata":{}}],"execution_count":137},{"cell_type":"code","source":"test = dataset[train_len:].copy()\ntest.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T17:59:18.391343Z","iopub.execute_input":"2025-10-08T17:59:18.391732Z","iopub.status.idle":"2025-10-08T17:59:18.398213Z","shell.execute_reply.started":"2025-10-08T17:59:18.391704Z","shell.execute_reply":"2025-10-08T17:59:18.397146Z"}},"outputs":[{"execution_count":138,"output_type":"execute_result","data":{"text/plain":"(418, 10)"},"metadata":{}}],"execution_count":138},{"cell_type":"code","source":"test = test.drop(columns=\"Survived\", axis=1)\ntest.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T18:00:21.488204Z","iopub.execute_input":"2025-10-08T18:00:21.488493Z","iopub.status.idle":"2025-10-08T18:00:21.500098Z","shell.execute_reply.started":"2025-10-08T18:00:21.488472Z","shell.execute_reply":"2025-10-08T18:00:21.499008Z"}},"outputs":[{"execution_count":141,"output_type":"execute_result","data":{"text/plain":"   Pclass  Sex   Age  SibSp  Parch     Fare  Embarked  Title  Cabin_gen\n0       3    0  34.5      0      0   7.8292         1      0          0\n1       3    1  47.0      1      0   7.0000         2      1          0\n2       2    0  62.0      0      0   9.6875         1      1          0\n3       3    0  27.0      0      0   8.6625         2      1          0\n4       3    1  22.0      1      1  12.2875         2      0          0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Title</th>\n      <th>Cabin_gen</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>0</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.8292</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>1</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.0000</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>0</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>9.6875</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>0</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.6625</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>1</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>12.2875</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":141},{"cell_type":"code","source":"Y_train = train.iloc[:,0].astype(int)\nY_train","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T19:39:20.561355Z","iopub.execute_input":"2025-10-08T19:39:20.561931Z","iopub.status.idle":"2025-10-08T19:39:20.570161Z","shell.execute_reply.started":"2025-10-08T19:39:20.561894Z","shell.execute_reply":"2025-10-08T19:39:20.569097Z"}},"outputs":[{"execution_count":158,"output_type":"execute_result","data":{"text/plain":"0      0\n1      1\n2      1\n3      1\n4      0\n      ..\n886    0\n887    1\n888    0\n889    1\n890    0\nName: Survived, Length: 891, dtype: int64"},"metadata":{}}],"execution_count":158},{"cell_type":"code","source":"X_train = train.drop(columns=[\"Survived\"], axis=1)\nX_train.head(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T19:39:24.076453Z","iopub.execute_input":"2025-10-08T19:39:24.076831Z","iopub.status.idle":"2025-10-08T19:39:24.094417Z","shell.execute_reply.started":"2025-10-08T19:39:24.076799Z","shell.execute_reply":"2025-10-08T19:39:24.092982Z"}},"outputs":[{"execution_count":159,"output_type":"execute_result","data":{"text/plain":"   Pclass  Sex   Age  SibSp  Parch     Fare  Embarked  Title  Cabin_gen\n0       3    0  22.0      1      0   7.2500         2      0          0\n1       1    1  38.0      1      0  71.2833         0      1          1\n2       3    1  26.0      0      0   7.9250         2      1          0\n3       1    1  35.0      1      0  53.1000         2      1          1\n4       3    0  35.0      0      0   8.0500         2      0          0\n5       3    0  28.0      0      0   8.4583         1      0          0\n6       1    0  54.0      0      0  51.8625         2      0          2\n7       3    0   2.0      3      1  21.0750         2      2          0\n8       3    1  27.0      0      2  11.1333         2      1          0\n9       2    1  14.0      1      0  30.0708         0      1          0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Title</th>\n      <th>Cabin_gen</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>0</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>0</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>3</td>\n      <td>0</td>\n      <td>28.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.4583</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>1</td>\n      <td>0</td>\n      <td>54.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>51.8625</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>3</td>\n      <td>0</td>\n      <td>2.0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>21.0750</td>\n      <td>2</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>3</td>\n      <td>1</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>11.1333</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>2</td>\n      <td>1</td>\n      <td>14.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>30.0708</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":159},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nimport xgboost as xgb\nfrom sklearn.model_selection import cross_val_score, StratifiedKFold","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T19:54:00.347969Z","iopub.execute_input":"2025-10-08T19:54:00.348258Z","iopub.status.idle":"2025-10-08T19:54:01.290429Z","shell.execute_reply.started":"2025-10-08T19:54:00.348237Z","shell.execute_reply":"2025-10-08T19:54:01.288886Z"}},"outputs":[],"execution_count":161},{"cell_type":"code","source":"kfold = StratifiedKFold(n_splits=10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T20:25:53.461637Z","iopub.execute_input":"2025-10-08T20:25:53.462065Z","iopub.status.idle":"2025-10-08T20:25:53.468150Z","shell.execute_reply.started":"2025-10-08T20:25:53.462035Z","shell.execute_reply":"2025-10-08T20:25:53.466929Z"}},"outputs":[],"execution_count":170},{"cell_type":"code","source":"cross_val_score(RandomForestClassifier(), X=X_train, y=Y_train, scoring='accuracy', cv=kfold, n_jobs=4) #método de treino base","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T20:25:55.271423Z","iopub.execute_input":"2025-10-08T20:25:55.271824Z","iopub.status.idle":"2025-10-08T20:25:58.801510Z","shell.execute_reply.started":"2025-10-08T20:25:55.271795Z","shell.execute_reply":"2025-10-08T20:25:58.800180Z"}},"outputs":[{"execution_count":171,"output_type":"execute_result","data":{"text/plain":"array([0.74444444, 0.84269663, 0.75280899, 0.83146067, 0.88764045,\n       0.84269663, 0.80898876, 0.7752809 , 0.88764045, 0.82022472])"},"metadata":{}}],"execution_count":171},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from scipy import stats\n\nmiss_dataframe = train[train[\"Name\"].str.contains(\"Miss\")]\n_, p_value = stats.shapiro(miss_dataframe)\nif p_value < 0.05:\n    print(\"SEM distribuição normal\")\nelse:\n    print(\"Distribuição normal\")\nmiss_dataframe.describe()\n\n#Note que devido o desvio padrão(std) ser 11, significa que (por seguir a distribuicao normal) \n#68% dos dados estão a 1 desvio padrão (isto é, media - std e media + std cobre 68% dos dados)\n#68%, pois segue a lógica de que 95% dos dados estão a dois desvios padrões e 99% a 3 desvios padrões\n#Logo, 68% dos dados estão entre 22.06 - 11.34 ~= 11 e 22.06 + 11.34 ~= 33 anos","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-07T00:32:36.184067Z","iopub.execute_input":"2025-10-07T00:32:36.184526Z","iopub.status.idle":"2025-10-07T00:32:36.231301Z","shell.execute_reply.started":"2025-10-07T00:32:36.184483Z","shell.execute_reply":"2025-10-07T00:32:36.230047Z"}},"outputs":[{"name":"stdout","text":"Distribuição normal\n","output_type":"stream"},{"execution_count":112,"output_type":"execute_result","data":{"text/plain":"       PassengerId    Survived      Pclass    Sex         Age       SibSp  \\\ncount   179.000000  179.000000  179.000000  179.0  179.000000  179.000000   \nmean    411.435754    0.698324    2.329609    1.0   22.061453    0.715084   \nstd     247.982353    0.460273    0.839854    0.0   11.343760    1.442667   \nmin       3.000000    0.000000    1.000000    1.0    0.750000    0.000000   \n25%     214.000000    0.000000    2.000000    1.0   15.000000    0.000000   \n50%     388.000000    1.000000    3.000000    1.0   22.000000    0.000000   \n75%     614.500000    1.000000    3.000000    1.0   28.000000    1.000000   \nmax     889.000000    1.000000    3.000000    1.0   58.000000    8.000000   \n\n            Parch        Fare    Embarked  Title  \ncount  179.000000  179.000000  179.000000  179.0  \nmean     0.547486   42.431194    1.402235    1.0  \nstd      0.801496   65.575335    0.810878    0.0  \nmin      0.000000    6.750000    0.000000    1.0  \n25%      0.000000    7.925000    1.000000    1.0  \n50%      0.000000   15.500000    2.000000    1.0  \n75%      1.000000   36.687500    2.000000    1.0  \nmax      2.000000  512.329200    2.000000    1.0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>179.000000</td>\n      <td>179.000000</td>\n      <td>179.000000</td>\n      <td>179.0</td>\n      <td>179.000000</td>\n      <td>179.000000</td>\n      <td>179.000000</td>\n      <td>179.000000</td>\n      <td>179.000000</td>\n      <td>179.0</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>411.435754</td>\n      <td>0.698324</td>\n      <td>2.329609</td>\n      <td>1.0</td>\n      <td>22.061453</td>\n      <td>0.715084</td>\n      <td>0.547486</td>\n      <td>42.431194</td>\n      <td>1.402235</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>247.982353</td>\n      <td>0.460273</td>\n      <td>0.839854</td>\n      <td>0.0</td>\n      <td>11.343760</td>\n      <td>1.442667</td>\n      <td>0.801496</td>\n      <td>65.575335</td>\n      <td>0.810878</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>3.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>1.0</td>\n      <td>0.750000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>6.750000</td>\n      <td>0.000000</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>214.000000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>1.0</td>\n      <td>15.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>7.925000</td>\n      <td>1.000000</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>388.000000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>1.0</td>\n      <td>22.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>15.500000</td>\n      <td>2.000000</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>614.500000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>1.0</td>\n      <td>28.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>36.687500</td>\n      <td>2.000000</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>889.000000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>1.0</td>\n      <td>58.000000</td>\n      <td>8.000000</td>\n      <td>2.000000</td>\n      <td>512.329200</td>\n      <td>2.000000</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":112},{"cell_type":"code","source":"# I want to create a dictionary that looks like this, but i need to separate the strings like that. How can i do this?\n\n# dict_names = {\n#     [' Mr',]:0 #male adult\n#     [' Mrs', ' Miss_old', 'Mlle_old', 'Mme_old', ' Ms']:1, #female adult\n#     ['Master']:2, #male children\n#     ['Miss_ch', 'Mlle_ch', 'Mme_ch']:3 #female children\n#     [' Major', 'Col', 'Rev', ' Dr', 'Capt']:4 #Military\n#     [' Don', ' Lady', ' Sir', ' the Countess', ' Jonkheer', ]:5 #Nobelty\n# }\n\n# miss_dataframe = train[train[\"Name\"].str.contains(\"Miss\")]\n# miss_ch = miss_dataframe[miss_dataframe[\"Age\"] <= 14]\n# miss_old = miss_dataframe[miss_dataframe[\"Age\"] > 14]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-07T00:32:37.464517Z","iopub.execute_input":"2025-10-07T00:32:37.464899Z","iopub.status.idle":"2025-10-07T00:32:37.469680Z","shell.execute_reply.started":"2025-10-07T00:32:37.464866Z","shell.execute_reply":"2025-10-07T00:32:37.468101Z"}},"outputs":[],"execution_count":113},{"cell_type":"code","source":"# train[\"Title\"].map(dict_names)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-06T23:31:37.338333Z","iopub.execute_input":"2025-10-06T23:31:37.338716Z","iopub.status.idle":"2025-10-06T23:31:37.343262Z","shell.execute_reply.started":"2025-10-06T23:31:37.338684Z","shell.execute_reply":"2025-10-06T23:31:37.341761Z"}},"outputs":[],"execution_count":75},{"cell_type":"markdown","source":"# COISAS ANTIGAS -----------------------------------------------","metadata":{}},{"cell_type":"code","source":"train.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-25T17:02:46.036796Z","iopub.execute_input":"2025-09-25T17:02:46.037268Z","iopub.status.idle":"2025-09-25T17:02:46.052563Z","shell.execute_reply.started":"2025-09-25T17:02:46.037231Z","shell.execute_reply":"2025-09-25T17:02:46.051362Z"}},"outputs":[{"execution_count":41,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name  Sex   Age  SibSp  Parch  \\\n0                            Braund, Mr. Owen Harris    0  22.0      1      0   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...    1  38.0      1      0   \n2                             Heikkinen, Miss. Laina    1  26.0      0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)    1  35.0      1      0   \n4                           Allen, Mr. William Henry    0  35.0      0      0   \n\n             Ticket     Fare Cabin Embarked  \n0         A/5 21171   7.2500   NaN        S  \n1          PC 17599  71.2833   C85        C  \n2  STON/O2. 3101282   7.9250   NaN        S  \n3            113803  53.1000  C123        S  \n4            373450   8.0500   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>0</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>1</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>1</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>0</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":41},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# array = np.random.randint(0,10,size=(3,4), dtype=int)\n# array.reshape(-1,3)\n# array = array.astype(dtype=float)\n# array[1,:2] = np.nan\n\n# # array = pd.DataFrame(array)\n# print(pd.isnull(array))\n# # print(np.where())\n# print(np.where(pd.isnull(array)))\n\n\nnp.array(np.random.rand(2,3), ndmin=2, dtype=float)\n\narray = np.array([-1,0,1])\narray = array.astype(dtype=bool)\narray\n\n\n# i = integer\n# b = boolean\n# u = unsigned integer\n# f = float\n# c = complex float\n# m = timedelta\n# M = datetime\n# O = object\n# S = string","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-22T23:12:54.968036Z","iopub.execute_input":"2025-09-22T23:12:54.968455Z","iopub.status.idle":"2025-09-22T23:12:54.976415Z","shell.execute_reply.started":"2025-09-22T23:12:54.968425Z","shell.execute_reply":"2025-09-22T23:12:54.975106Z"}},"outputs":[{"execution_count":89,"output_type":"execute_result","data":{"text/plain":"array([ True, False,  True])"},"metadata":{}}],"execution_count":89},{"cell_type":"code","source":"def detect_outliers_std(df, n, features):\n    outlier_indices = []\n\n    for col in features:\n        upper_bound = df[col].mean() + 3 * df[col].std()\n        lower_bound = df[col].mean() - 3 * df[col].std()\n        \n        # asassfafafafdasasdadasd\n        outlier_list_col = df[(df[col] < lower_bound) | (df[col] > upper_bound)].index\n\n        # asadadasdadads\n        outlier_indices.extend(outlier_list_col)\n    \n    # Selecionar observações que contêm mais de n outliers\n    outlier_indices = Counter(outlier_indices)        \n    multiple_outliers = [k for k, v in outlier_indices.items() if v > n]\n    \n    return multiple_outliers   \n\n# Detecta outliers nas variáveis Age, SibSp, Parch e Fare\noutliers_to_drop_std = detect_outliers_std(train, 0, [\"Age\", \"SibSp\", \"Parch\", \"Fare\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-22T22:47:42.288670Z","iopub.execute_input":"2025-09-22T22:47:42.289006Z","iopub.status.idle":"2025-09-22T22:47:42.305003Z","shell.execute_reply.started":"2025-09-22T22:47:42.288980Z","shell.execute_reply":"2025-09-22T22:47:42.303615Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/pandas/core/computation/expressions.py:73: RuntimeWarning: invalid value encountered in less\n  return op(a, b)\n/usr/local/lib/python3.10/dist-packages/pandas/core/computation/expressions.py:73: RuntimeWarning: invalid value encountered in greater\n  return op(a, b)\n","output_type":"stream"}],"execution_count":52},{"cell_type":"code","source":"train.loc[outliers_to_drop]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-17T18:39:12.656807Z","iopub.execute_input":"2025-09-17T18:39:12.657169Z","iopub.status.idle":"2025-09-17T18:39:12.674858Z","shell.execute_reply.started":"2025-09-17T18:39:12.657141Z","shell.execute_reply":"2025-09-17T18:39:12.673654Z"}},"outputs":[{"execution_count":48,"output_type":"execute_result","data":{"text/plain":"     PassengerId  Survived  Pclass  \\\n7              8         0       3   \n16            17         0       3   \n24            25         0       3   \n27            28         0       1   \n50            51         0       3   \n..           ...       ...     ...   \n802          803         1       1   \n820          821         1       1   \n835          836         1       1   \n856          857         1       1   \n879          880         1       1   \n\n                                                  Name     Sex   Age  SibSp  \\\n7                       Palsson, Master. Gosta Leonard    male   2.0      3   \n16                                Rice, Master. Eugene    male   2.0      4   \n24                       Palsson, Miss. Torborg Danira  female   8.0      3   \n27                      Fortune, Mr. Charles Alexander    male  19.0      3   \n50                          Panula, Master. Juha Niilo    male   7.0      4   \n..                                                 ...     ...   ...    ...   \n802                Carter, Master. William Thornton II    male  11.0      1   \n820  Hays, Mrs. Charles Melville (Clara Jennings Gr...  female  52.0      1   \n835                        Compton, Miss. Sara Rebecca  female  39.0      1   \n856         Wick, Mrs. George Dennick (Mary Hitchcock)  female  45.0      1   \n879      Potter, Mrs. Thomas Jr (Lily Alexenia Wilson)  female  56.0      0   \n\n     Parch    Ticket      Fare        Cabin Embarked  \n7        1    349909   21.0750          NaN        S  \n16       1    382652   29.1250          NaN        Q  \n24       1    349909   21.0750          NaN        S  \n27       2     19950  263.0000  C23 C25 C27        S  \n50       1   3101295   39.6875          NaN        S  \n..     ...       ...       ...          ...      ...  \n802      2    113760  120.0000      B96 B98        S  \n820      1     12749   93.5000          B69        S  \n835      1  PC 17756   83.1583          E49        C  \n856      1     36928  164.8667          NaN        S  \n879      1     11767   83.1583          C50        C  \n\n[81 rows x 12 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>7</th>\n      <td>8</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Palsson, Master. Gosta Leonard</td>\n      <td>male</td>\n      <td>2.0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>349909</td>\n      <td>21.0750</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>17</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Rice, Master. Eugene</td>\n      <td>male</td>\n      <td>2.0</td>\n      <td>4</td>\n      <td>1</td>\n      <td>382652</td>\n      <td>29.1250</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>25</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Palsson, Miss. Torborg Danira</td>\n      <td>female</td>\n      <td>8.0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>349909</td>\n      <td>21.0750</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>28</td>\n      <td>0</td>\n      <td>1</td>\n      <td>Fortune, Mr. Charles Alexander</td>\n      <td>male</td>\n      <td>19.0</td>\n      <td>3</td>\n      <td>2</td>\n      <td>19950</td>\n      <td>263.0000</td>\n      <td>C23 C25 C27</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>50</th>\n      <td>51</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Panula, Master. Juha Niilo</td>\n      <td>male</td>\n      <td>7.0</td>\n      <td>4</td>\n      <td>1</td>\n      <td>3101295</td>\n      <td>39.6875</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>802</th>\n      <td>803</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Carter, Master. William Thornton II</td>\n      <td>male</td>\n      <td>11.0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>113760</td>\n      <td>120.0000</td>\n      <td>B96 B98</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>820</th>\n      <td>821</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Hays, Mrs. Charles Melville (Clara Jennings Gr...</td>\n      <td>female</td>\n      <td>52.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>12749</td>\n      <td>93.5000</td>\n      <td>B69</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>835</th>\n      <td>836</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Compton, Miss. Sara Rebecca</td>\n      <td>female</td>\n      <td>39.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>PC 17756</td>\n      <td>83.1583</td>\n      <td>E49</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>856</th>\n      <td>857</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Wick, Mrs. George Dennick (Mary Hitchcock)</td>\n      <td>female</td>\n      <td>45.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>36928</td>\n      <td>164.8667</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>879</th>\n      <td>880</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Potter, Mrs. Thomas Jr (Lily Alexenia Wilson)</td>\n      <td>female</td>\n      <td>56.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>11767</td>\n      <td>83.1583</td>\n      <td>C50</td>\n      <td>C</td>\n    </tr>\n  </tbody>\n</table>\n<p>81 rows × 12 columns</p>\n</div>"},"metadata":{}}],"execution_count":48},{"cell_type":"code","source":"def detect_outliers_iqr(df, n, features):\n    outlier_indices = []\n\n    for col in features:\n        Q1 = np.percentile(df[col], 25)\n        Q3 = np.percentile(df[col], 75)\n        IQR = Q3 - Q1\n\n        \n        outlier_step = IQR * 1.5\n\n        # Determinar uma lista de índices dos outliers para a variável col\n        outlier_list_col = df[(df[col] < Q1 - outlier_step) | (df[col] > Q3 + outlier_step)].index\n\n        # Adicionar os índices dos outliers encontrados para col à lista de índices de outliers\n        outlier_indices.extend(outlier_list_col)\n    \n    # Selecionar observações que contêm mais de n outliers\n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = [k for k, v in outlier_indices.items() if v > n]\n    \n    return multiple_outliers   \n\n# Detecta outliers nas variáveis Age, SibSp, Parch e Fare\noutliers_to_drop = detect_outliers_iqr(train, 1, [\"Age\", \"SibSp\", \"Parch\", \"Fare\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-17T18:39:12.011085Z","iopub.execute_input":"2025-09-17T18:39:12.011450Z","iopub.status.idle":"2025-09-17T18:39:12.026210Z","shell.execute_reply.started":"2025-09-17T18:39:12.011419Z","shell.execute_reply":"2025-09-17T18:39:12.025249Z"}},"outputs":[],"execution_count":47},{"cell_type":"code","source":"# train.loc[outliers_to_drop_std]\noutliers_to_drop_std","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-17T18:39:15.887915Z","iopub.execute_input":"2025-09-17T18:39:15.888233Z","iopub.status.idle":"2025-09-17T18:39:15.895034Z","shell.execute_reply.started":"2025-09-17T18:39:15.888209Z","shell.execute_reply":"2025-09-17T18:39:15.893787Z"}},"outputs":[{"execution_count":50,"output_type":"execute_result","data":{"text/plain":"[630,\n 851,\n 16,\n 50,\n 59,\n 68,\n 71,\n 119,\n 159,\n 164,\n 171,\n 180,\n 182,\n 201,\n 233,\n 261,\n 266,\n 278,\n 324,\n 386,\n 480,\n 541,\n 542,\n 683,\n 686,\n 787,\n 792,\n 813,\n 824,\n 846,\n 850,\n 863,\n 13,\n 25,\n 86,\n 167,\n 360,\n 437,\n 438,\n 567,\n 610,\n 638,\n 678,\n 736,\n 774,\n 858,\n 885,\n 27,\n 88,\n 118,\n 258,\n 299,\n 311,\n 341,\n 377,\n 380,\n 527,\n 557,\n 679,\n 689,\n 700,\n 716,\n 730,\n 737,\n 742,\n 779]"},"metadata":{}}],"execution_count":50},{"cell_type":"code","source":"train.drop(columns=outilers_to_drop_std)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-17T18:39:16.179649Z","iopub.execute_input":"2025-09-17T18:39:16.179971Z","iopub.status.idle":"2025-09-17T18:39:16.214037Z","shell.execute_reply.started":"2025-09-17T18:39:16.179948Z","shell.execute_reply":"2025-09-17T18:39:16.212423Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-51-c024e55c304f>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtrain\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0moutilers_to_drop_std\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'outilers_to_drop_std' is not defined"],"ename":"NameError","evalue":"name 'outilers_to_drop_std' is not defined","output_type":"error"}],"execution_count":51},{"cell_type":"code","source":"train = train.fillna(np.nan)\ntrain.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-17T18:39:16.462609Z","iopub.execute_input":"2025-09-17T18:39:16.462967Z","iopub.status.idle":"2025-09-17T18:39:16.473870Z","shell.execute_reply.started":"2025-09-17T18:39:16.462940Z","shell.execute_reply":"2025-09-17T18:39:16.472782Z"}},"outputs":[{"execution_count":52,"output_type":"execute_result","data":{"text/plain":"PassengerId      0\nSurvived         0\nPclass           0\nName             0\nSex              0\nAge            177\nSibSp            0\nParch            0\nTicket           0\nFare             0\nCabin          687\nEmbarked         2\ndtype: int64"},"metadata":{}}],"execution_count":52},{"cell_type":"code","source":"g = sns.heatmap(train[numeric].corr(), annot=True, fmt = \".2f\", cmap = \"coolwarm\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-17T18:39:22.995982Z","iopub.execute_input":"2025-09-17T18:39:22.996371Z","iopub.status.idle":"2025-09-17T18:39:23.644644Z","shell.execute_reply.started":"2025-09-17T18:39:22.996341Z","shell.execute_reply":"2025-09-17T18:39:23.643570Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":53},{"cell_type":"code","source":"plt.scatter(x=train[\"Age\"], y=train[\"Survived\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-17T18:39:23.728029Z","iopub.execute_input":"2025-09-17T18:39:23.728383Z","iopub.status.idle":"2025-09-17T18:39:23.936586Z","shell.execute_reply.started":"2025-09-17T18:39:23.728353Z","shell.execute_reply":"2025-09-17T18:39:23.935564Z"}},"outputs":[{"execution_count":54,"output_type":"execute_result","data":{"text/plain":"<matplotlib.collections.PathCollection at 0x7f69d19cdae0>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":54},{"cell_type":"code","source":"\nprint(train.groupby([\"Age\", \"Survived\"]).size())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-17T18:39:28.986147Z","iopub.execute_input":"2025-09-17T18:39:28.986477Z","iopub.status.idle":"2025-09-17T18:39:28.997582Z","shell.execute_reply.started":"2025-09-17T18:39:28.986449Z","shell.execute_reply":"2025-09-17T18:39:28.996615Z"}},"outputs":[{"execution_count":56,"output_type":"execute_result","data":{"text/plain":"Age    Survived\n0.42   1           1\n0.67   1           1\n0.75   1           2\n0.83   1           2\n0.92   1           1\n                  ..\n70.00  0           2\n70.50  0           1\n71.00  0           2\n74.00  0           1\n80.00  1           1\nLength: 142, dtype: int64"},"metadata":{}}],"execution_count":56},{"cell_type":"code","source":"# plt.bar(x=train[\"Age\"], height=train[\"Survived\"])\n\n\n# Group by Age and Survival\nsurvival_counts = train.groupby([\"Age\", \"Survived\"]).size().unstack()\n\n# Plot\nax = survival_counts.plot(kind=\"bar\", stacked=True, figsize=(15,6))\n\nfor i in ax.containers:\n    ax.bar_label(i, label_type=\"center\")\n\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-25T15:48:27.496494Z","iopub.execute_input":"2025-09-25T15:48:27.496907Z","iopub.status.idle":"2025-09-25T15:48:29.093370Z","shell.execute_reply.started":"2025-09-25T15:48:27.496877Z","shell.execute_reply":"2025-09-25T15:48:29.091766Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1500x600 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":85},{"cell_type":"code","source":"total_age = train.groupby([\"Age\"]).size()\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-17T19:00:13.729327Z","iopub.execute_input":"2025-09-17T19:00:13.729751Z","iopub.status.idle":"2025-09-17T19:00:13.739088Z","shell.execute_reply.started":"2025-09-17T19:00:13.729720Z","shell.execute_reply":"2025-09-17T19:00:13.737937Z"}},"outputs":[{"execution_count":64,"output_type":"execute_result","data":{"text/plain":"Age\n0.42     1\n0.67     1\n0.75     2\n0.83     2\n0.92     1\n        ..\n70.00    2\n70.50    1\n71.00    2\n74.00    1\n80.00    1\nLength: 88, dtype: int64"},"metadata":{}}],"execution_count":64},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}